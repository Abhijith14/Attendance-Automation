<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Selenium.WebDriverBackedSelenium</name>
    </assembly>
    <members>
        <member name="T:Selenium.ICommandProcessor">
            <summary>
            Provides a DoCommand method, which sends the command to the browser to be performed.
            </summary>
        </member>
        <member name="M:Selenium.ICommandProcessor.DoCommand(System.String,System.String[])">
            <summary>
            Send the specified remote command to the browser to be performed
            </summary>
            <param name="command">the remote command verb</param>
            <param name="args">the arguments to the remote command (depends on the verb)</param>
            <returns>the command result, defined by the remote JavaScript.  "getX" style
            	commands may return data from the browser</returns>
        </member>
        <member name="M:Selenium.ICommandProcessor.SetExtensionJs(System.String)">
            <summary>
            Sets the extension Javascript to be used in the created session
            </summary>
            <param name="extensionJs">The extension JavaScript to use.</param>
        </member>
        <member name="M:Selenium.ICommandProcessor.Start">
            <summary>
            Starts a new Selenium testing session
            </summary>
        </member>
        <member name="M:Selenium.ICommandProcessor.Start(System.String)">
            <summary>
            Starts a new Selenium testing session with the specified options
            </summary>
            <param name="optionsString">a string representing the options to start the session with.</param>
        </member>
        <member name="M:Selenium.ICommandProcessor.Start(System.Object)">
            <summary>
            Starts a new Selenium testing session with the specified options
            </summary>
            <param name="optionsObject">an Options object representing the options to start the session with.</param>
        </member>
        <member name="M:Selenium.ICommandProcessor.Stop">
            <summary>
            Ends the current Selenium testing session (normally killing the browser)
            </summary>
        </member>
        <member name="M:Selenium.ICommandProcessor.GetString(System.String,System.String[])">
            <summary>
            Runs the specified remote accessor (getter) command and returns the retrieved result
            </summary>
            <param name="command">the remote command verb</param>
            <param name="args">the arguments to the remote command (depends on the verb)</param>
            <returns>the result of running the accessor on the browser</returns>
        </member>
        <member name="M:Selenium.ICommandProcessor.GetStringArray(System.String,System.String[])">
            <summary>
            Runs the specified remote accessor (getter) command and returns the retrieved result
            </summary>
            <param name="command">the remote command verb</param>
            <param name="args">the arguments to the remote command (depends on the verb)</param>
            <returns>the result of running the accessor on the browser</returns>
        </member>
        <member name="M:Selenium.ICommandProcessor.GetNumber(System.String,System.String[])">
            <summary>
            Runs the specified remote accessor (getter) command and returns the retrieved result
            </summary>
            <param name="command">the remote command verb</param>
            <param name="args">the arguments to the remote command (depends on the verb)</param>
            <returns>the result of running the accessor on the browser</returns>
        </member>
        <member name="M:Selenium.ICommandProcessor.GetNumberArray(System.String,System.String[])">
            <summary>
            Runs the specified remote accessor (getter) command and returns the retrieved result
            </summary>
            <param name="command">the remote command verb</param>
            <param name="args">the arguments to the remote command (depends on the verb)</param>
            <returns>the result of running the accessor on the browser</returns>
        </member>
        <member name="M:Selenium.ICommandProcessor.GetBoolean(System.String,System.String[])">
            <summary>
            Runs the specified remote accessor (getter) command and returns the retrieved result
            </summary>
            <param name="command">the remote command verb</param>
            <param name="args">the arguments to the remote command (depends on the verb)</param>
            <returns>the result of running the accessor on the browser</returns>
        </member>
        <member name="M:Selenium.ICommandProcessor.GetBooleanArray(System.String,System.String[])">
            <summary>
            Runs the specified remote accessor (getter) command and returns the retrieved result
            </summary>
            <param name="command">the remote command verb</param>
            <param name="args">the arguments to the remote command (depends on the verb)</param>
            <returns>the result of running the accessor on the browser</returns>
        </member>
        <member name="T:Selenium.Internal.AlertOverride">
            <summary>
            Provides methods for overriding the JavaScript alert() and confirm() methods.
            </summary>
        </member>
        <member name="M:Selenium.Internal.AlertOverride.#ctor(OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the AlertOverride class.
            </summary>
            <param name="driver">The driver to use in overriding the JavaScript alert() and confirm() methods.</param>
        </member>
        <member name="M:Selenium.Internal.AlertOverride.ReplaceAlertMethod">
            <summary>
            Replaces the JavaScript alert() and confirm() methods.
            </summary>
        </member>
        <member name="M:Selenium.Internal.AlertOverride.GetNextAlert">
            <summary>
            Gets the next JavaScript alert message.
            </summary>
            <returns>The text of the next alert message.</returns>
        </member>
        <member name="M:Selenium.Internal.AlertOverride.IsAlertPresent">
            <summary>
            Gets a value indicating whether a JavaScript alert is present.
            </summary>
            <returns><see langword="true"/> if an alert is present; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Selenium.Internal.AlertOverride.GetNextConfirmation">
            <summary>
            Gets the next JavaScript confirm message.
            </summary>
            <returns>The text of the next confirm message.</returns>
        </member>
        <member name="M:Selenium.Internal.AlertOverride.IsConfirmationPresent">
            <summary>
            Gets a value indicating whether a JavaScript confirm is present.
            </summary>
            <returns><see langword="true"/> if an confirm is present; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Selenium.Internal.CommandTimer">
            <summary>
            Provides a timer for running SeleneseCommands
            </summary>
        </member>
        <member name="M:Selenium.Internal.CommandTimer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.CommandTimer"/> class.
            </summary>
            <param name="timeout">The timeout, in milliseconds, of the command.</param>
        </member>
        <member name="P:Selenium.Internal.CommandTimer.Timeout">
            <summary>
            Gets or sets the timeout for running the command, in milliseconds.
            </summary>
        </member>
        <member name="M:Selenium.Internal.CommandTimer.Execute(Selenium.Internal.SeleniumEmulation.SeleneseCommand,OpenQA.Selenium.IWebDriver,System.String[])">
            <summary>
            Executes a command.
            </summary>
            <param name="commandToExecute">The <see cref="T:Selenium.Internal.SeleniumEmulation.SeleneseCommand"/> to execute.</param>
            <param name="commandDriver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> to use in executing the command.</param>
            <param name="commandArguments">An array of strings containng the command arguments.</param>
            <returns>The result of the command.</returns>
            <remarks>This method executes the command on a separate thread.</remarks>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.AddLocationStrategy">
            <summary>
            Defines the command for the addLocationStrategy keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AddLocationStrategy.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.AddLocationStrategy"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> object used to locate elements.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AddLocationStrategy.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.AddSelection">
            <summary>
            Defines the command for the addSelection keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AddSelection.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.AddSelection"/> class.
            </summary>
            <param name="elementFinder">The <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> to use in finding elements.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AddSelection.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.AltKeyDown">
            <summary>
            Defines the command for the altKeyDown keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AltKeyDown.#ctor(Selenium.Internal.SeleniumEmulation.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.AltKeyDown"/> class.
            </summary>
            <param name="keyState">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object tracking the state of modifier keys.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AltKeyDown.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.AltKeyUp">
            <summary>
            Defines the command for the altKeyUp keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AltKeyUp.#ctor(Selenium.Internal.SeleniumEmulation.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.AltKeyUp"/> class.
            </summary>
            <param name="keyState">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object tracking the state of modifier keys.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AltKeyUp.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.AssignId">
            <summary>
            Defines the command for the assignId keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AssignId.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.AssignId"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used in finding the element to which to assign the ID.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AssignId.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.AttachFile">
            <summary>
            Defines the command for the attachFile keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AttachFile.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.AttachFile"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used in finding the element.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.AttachFile.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.CaptureScreenshotToString">
            <summary>
            Defines the command for the captureScreenshotToString keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.CaptureScreenshotToString.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Check">
            <summary>
            Defines the command for the check keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Check.#ctor(Selenium.Internal.AlertOverride,Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Check"/> class.
            </summary>
            <param name="alert">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Check.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Click">
            <summary>
            Defines the command for the click keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Click.#ctor(Selenium.Internal.AlertOverride,Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Click"/> class.
            </summary>
            <param name="alert">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Click.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.ClickAt">
            <summary>
            Defines the command for the click keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ClickAt.#ctor(Selenium.Internal.AlertOverride,Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.ClickAt"/> class.
            </summary>
            <param name="alert">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ClickAt.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Close">
            <summary>
            Defines the command for the close keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Close.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.CompoundMutator">
            <summary>
            A class that collects together a group of other mutators and applies
            them in the order they've been added to any script that needs modification.
            Any JS to be executed will be wrapped in an "eval" block so that a
            meaningful return value can be created.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.CompoundMutator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.CompoundMutator"/> class.
            </summary>
            <param name="basePath">The URL to use in mutating the script.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.CompoundMutator.Mutate(System.String,System.Text.StringBuilder)">
            <summary>
            Mutate a script so by calling all component mutators on it in turn.
            The original, unmodified script is used to generate a script
            on the StringBuilder, the "ToString" method of which should be
            used to get the result. We make use of a StringBuilder rather than a
            normal String so that we can efficiently chain mutators.
            </summary>
            <param name="script">The original script.</param>
            <param name="outputTo">The mutated script.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.CompoundMutator.AddMutator(Selenium.Internal.SeleniumEmulation.IScriptMutator)">
            <summary>
            Adds a mutator to the collection
            </summary>
            <param name="mutator">The <see cref="T:Selenium.Internal.SeleniumEmulation.IScriptMutator"/> to add.</param>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.ControlKeyDown">
            <summary>
            Defines the command for the controlKeyDown keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ControlKeyDown.#ctor(Selenium.Internal.SeleniumEmulation.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.ControlKeyDown"/> class.
            </summary>
            <param name="keyState">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object tracking the state of modifier keys.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ControlKeyDown.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.ControlKeyUp">
            <summary>
            Defines the command for the controlKeyUp keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ControlKeyUp.#ctor(Selenium.Internal.SeleniumEmulation.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.ControlKeyUp"/> class.
            </summary>
            <param name="keyState">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object tracking the state of modifier keys.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ControlKeyUp.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.CreateCookie">
            <summary>
            Defines the command for the createCookie keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.CreateCookie.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.DeleteAllVisibleCookies">
            <summary>
            Defines the command for the deleteAllVisibleCookies keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.DeleteAllVisibleCookies.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="ignored">The first parameter to the command.</param>
            <param name="alsoIgnored">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.DeleteCookie">
            <summary>
            Defines the command for the deleteCookie keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.DeleteCookie.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.DoubleClick">
            <summary>
            Defines the command for the doubleClick keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.DoubleClick.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.DoubleClick"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.DoubleClick.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.DragAndDrop">
            <summary>
            Defines the command for the dragAndDrop keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.DragAndDrop.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.DragAndDrop"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.DragAndDrop.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.DragAndDropToObject">
            <summary>
            Defines the command for the dragAndDropToObject keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.DragAndDropToObject.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.DragAndDropToObject"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.DragAndDropToObject.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.ElementFinder">
            <summary>
            Provides methods for finding elements.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ElementFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> class.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ElementFinder.FindElement(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Finds an element.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> to use in finding the elements.</param>
            <param name="locator">The locator string describing how to find the element.</param>
            <returns>An <see cref="T:OpenQA.Selenium.IWebElement"/> described by the locator.</returns>
            <exception cref="T:Selenium.SeleniumException">There is no element matching the locator.</exception>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ElementFinder.FindStrategy(System.String)">
            <summary>
            Gets the strategy used to find elements.
            </summary>
            <param name="locator">The locator string that defines the strategy.</param>
            <returns>A string used in finding elements.</returns>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ElementFinder.AddStrategy(System.String,System.String)">
            <summary>
            Adds a strategy to the dictionary of known lookup strategies.
            </summary>
            <param name="strategyName">The name used to identify the lookup strategy.</param>
            <param name="strategy">The string used in finding elements.</param>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.FindFirstSelectedOptionProperty">
            <summary>
            Defines the command for the findFirstSelectedOptionProperty keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FindFirstSelectedOptionProperty.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.FindFirstSelectedOptionProperty"/> class.
            </summary>
            <param name="finder">A <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> that gets options from the element.</param>
            <param name="property">The property on which to select the options.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FindFirstSelectedOptionProperty.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.FindSelectedOptionProperties">
            <summary>
            Defines the command for the findSelectedOptionProperties keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FindSelectedOptionProperties.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.FindSelectedOptionProperties"/> class.
            </summary>
            <param name="finder">A <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> that gets options from the element.</param>
            <param name="property">The property on which to select the options.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FindSelectedOptionProperties.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.FireEvent">
            <summary>
            Defines the command for the fireEvent keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FireEvent.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.FireEvent"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FireEvent.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.FireNamedEvent">
            <summary>
            Defines the command for the fireEventNamed keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FireNamedEvent.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.FireNamedEvent"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
            <param name="eventName">The name of the event to fire.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FireNamedEvent.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.FunctionDeclaration">
            <summary>
            A mechanism for taking a function declaration from a script meant for Selenium Core
            and converting to something that webdriver can evaluate.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FunctionDeclaration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.FunctionDeclaration"/> class.
            </summary>
            <param name="raw">The raw term to mutate.</param>
            <param name="result">The result to which to set the term.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.FunctionDeclaration.Mutate(System.String,System.Text.StringBuilder)">
            <summary>
            Mutate a script so that function declarations have the correct scope.
            The original, unmodified script is used to generate a script
            on the StringBuilder, the "ToString" method of which should be
            used to get the result. We make use of a StringBuilder rather than a
            normal String so that we can efficiently chain mutators.
            </summary>
            <param name="script">The original script.</param>
            <param name="outputTo">The mutated script.</param>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetAlert">
            <summary>
            Defines the command for the getAlert keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetAlert.#ctor(Selenium.Internal.AlertOverride)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetAlert"/> class.
            </summary>
            <param name="alertOverride">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetAlert.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetAllButtons">
            <summary>
            Defines the command for the getAllButtons keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetAllButtons.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetAllFields">
            <summary>
            Defines the command for the getAllFields keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetAllFields.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetAllLinks">
            <summary>
            Defines the command for the getAllLinks keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetAllLinks.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetAllWindowTitles">
            <summary>
            Defines the command for the getAllWindowTitles keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetAllWindowTitles.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetAttribute">
            <summary>
            Defines the command for the getAttribute keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetAttribute.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetAttribute"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetAttribute.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetAttributeFromAllWindows">
            <summary>
            Defines the command for the getAttributeFromAllWindows keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetAttributeFromAllWindows.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetBodyText">
            <summary>
            Defines the command for the getBodyText keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetBodyText.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetConfirmation">
            <summary>
            Defines the command for the getConfirmation keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetConfirmation.#ctor(Selenium.Internal.AlertOverride)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetConfirmation"/> class.
            </summary>
            <param name="alertOverride">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetConfirmation.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetCookie">
            <summary>
            Defines the command for the getCookie keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetCookie.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetCookieByName">
            <summary>
            Defines the command for the getCookieByName keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetCookieByName.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetCssCount">
            <summary>
            Defines the command for the getCssCount keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetCssCount.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetElementHeight">
            <summary>
            Defines the command for the getElementHeight keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementHeight.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetElementHeight"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementHeight.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetElementIndex">
            <summary>
            Defines the command for the getElementIndex keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementIndex.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetElementIndex"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementIndex.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetElementPositionLeft">
            <summary>
            Defines the command for the getElementPositionLeft keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementPositionLeft.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetElementPositionLeft"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementPositionLeft.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetElementPositionTop">
            <summary>
            Defines the command for the getElementPositionTop keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementPositionTop.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetElementPositionTop"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementPositionTop.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetElementWidth">
            <summary>
            Defines the command for the getElementWidth keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementWidth.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetElementWidth"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetElementWidth.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetEval">
            <summary>
            Defines the command for the getEval keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetEval.#ctor(Selenium.Internal.SeleniumEmulation.IScriptMutator)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetEval"/> class.
            </summary>
            <param name="mutator">The <see cref="T:Selenium.Internal.SeleniumEmulation.IScriptMutator"/> used to replace terms in the script being run.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetEval.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetExpression">
            <summary>
            Defines the command for the getExpression keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetExpression.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetHtmlSource">
            <summary>
            Defines the command for the getHtmlSource keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetHtmlSource.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="ignored">The first parameter to the command.</param>
            <param name="alsoIgnored">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetLocation">
            <summary>
            Defines the command for the getLocation keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetLocation.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetSelectOptions">
            <summary>
            Defines the command for the getSelectOptions keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetSelectOptions.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetSelectOptions"/> class.
            </summary>
            <param name="finder">A <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used in getting the select options.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetSelectOptions.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetTable">
            <summary>
            Defines the command for the getTable keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetTable.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetTable"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetTable.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetText">
            <summary>
            Defines the command for the getText keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetText.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetText"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetText.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetTitle">
            <summary>
            Defines the command for the getTitle keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetTitle.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetValue">
            <summary>
            Defines the command for the getValue keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetValue.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.GetValue"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetValue.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GetXpathCount">
            <summary>
            Defines the command for the getXpathCount keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GetXpathCount.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.GoBack">
            <summary>
            Defines the command for the goBack keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.GoBack.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="ignored">The first parameter to the command.</param>
            <param name="alsoIgnored">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Highlight">
            <summary>
            Defines the command for the highlight keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Highlight.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Highlight"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Highlight.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IFilterFunction">
            <summary>
            Provides a method by which to filter elements.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IFilterFunction.FilterElements(System.Collections.Generic.IList{OpenQA.Selenium.IWebElement},System.String)">
            <summary>
            Filters elements by the specified criteria.
            </summary>
            <param name="allElements">A list of all elements to be filtered.</param>
            <param name="filterValue">The filter string containing the criteria on which to filter.</param>
            <returns>A list of element, filtered by the criteria.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IOptionSelectStrategy">
            <summary>
            Provides a method by which to select options.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IOptionSelectStrategy.SelectOption(System.Collections.ObjectModel.ReadOnlyCollection{OpenQA.Selenium.IWebElement},System.String,System.Boolean,System.Boolean)">
            <summary>
            Selects an option.
            </summary>
            <param name="fromOptions">A list of options to select from.</param>
            <param name="selectThis">The option to select.</param>
            <param name="setSelected"><see langword="true"/> to select the option; <see langword="false"/> to unselect.</param>
            <param name="allowMultipleSelect"><see langword="true"/> to allow multiple selections; otherwise, <see langword="false"/>.</param>
            <returns><see langword="true"/> if the option is selected; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsAlertPresent">
            <summary>
            Defines the command for the isAlertPresent keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsAlertPresent.#ctor(Selenium.Internal.AlertOverride)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.IsAlertPresent"/> class.
            </summary>
            <param name="alertOverride">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsAlertPresent.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsChecked">
            <summary>
            Defines the command for the isChecked keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsChecked.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.IsChecked"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsChecked.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsConfirmationPresent">
            <summary>
            Defines the command for the isConfirmationPresent keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsConfirmationPresent.#ctor(Selenium.Internal.AlertOverride)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.IsConfirmationPresent"/> class.
            </summary>
            <param name="alertOverride">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsConfirmationPresent.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsCookiePresent">
            <summary>
            Defines the command for the isCookiePresent keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsCookiePresent.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IScriptMutator">
            <summary>
            A mechanism for taking a single method from a script meant for Selenium Core
            and converting to something that webdriver can evaluate.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IScriptMutator.Mutate(System.String,System.Text.StringBuilder)">
            <summary>
            Mutate a script. The original, unmodified script is used to generate a
            script on the StringBuilder, the "ToString" method of which should be
            used to get the result. We make use of a StringBuilder rather than a
            normal String so that we can efficiently chain mutators.
            </summary>
            <param name="script">The original script.</param>
            <param name="outputTo">The mutated script</param>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsEditable">
            <summary>
            Defines the command for the isEditable keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsEditable.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.IsEditable"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsEditable.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsElementPresent">
            <summary>
            Defines the command for the isElementPresent keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsElementPresent.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.IsElementPresent"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsElementPresent.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsOrdered">
            <summary>
            Defines the command for the isOrdered keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsOrdered.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.IsOrdered"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsOrdered.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsSomethingSelected">
            <summary>
            Defines the command for the isSomethingSelected keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsSomethingSelected.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.IsSomethingSelected"/> class.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsSomethingSelected.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsTextPresent">
            <summary>
            Defines the command for the isTextPresent keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsTextPresent.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.IsVisible">
            <summary>
            Defines the command for the isVisible keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsVisible.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.IsVisible"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.IsVisible.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.ITextMatchingStrategy">
            <summary>
            Provides methods to determine if the text is a match.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ITextMatchingStrategy.IsAMatch(System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified text is a match.
            </summary>
            <param name="compareThis">The text to compare.</param>
            <param name="compareTo">The text to compare to.</param>
            <returns><see langword="true"/> if the strings match; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.JavaScriptLibrary">
            <summary>
            Provides the internal JavaScript library.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.JavaScriptLibrary.CallEmbeddedSelenium(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement,System.Object[])">
            <summary>
            Calls the embedded selenium library in a web page.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> object used to call the script.</param>
            <param name="functionName">The function name to call.</param>
            <param name="element">An <see cref="T:OpenQA.Selenium.IWebElement"/> used as an argument to the JavaScript function.</param>
            <param name="values">An array of values containing additional arguments to the function.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.JavaScriptLibrary.CallEmbeddedHtmlUtilities(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement,System.Object[])">
            <summary>
            Calls the embedded HTML utilities library in a web page.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> object used to call the script.</param>
            <param name="functionName">The function name to call.</param>
            <param name="element">An <see cref="T:OpenQA.Selenium.IWebElement"/> used as an argument to the JavaScript function.</param>
            <param name="values">An array of values containing additional arguments to the function.</param>
            <returns>The result of the script</returns>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.JavaScriptLibrary.ExecuteScript(OpenQA.Selenium.IWebDriver,System.String,System.Object[])">
            <summary>
            Executes a script in a web page.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> object used to call the script.</param>
            <param name="script">The script to run.</param>
            <param name="args">An array of values containing additional arguments to the function.</param>
            <returns>The result of the script</returns>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.JavaScriptLibrary.GetSeleniumScript(System.String)">
            <summary>
            Loads the named Selenium script and returns it wrapped in an anonymous function.
            </summary>
            <param name="libraryName">The script to load.</param>
            <returns>The loaded script wrapped in an anonymous function.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.KeyEvent">
            <summary>
            Defines the command for the keyEvent keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.KeyEvent.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder,Selenium.Internal.SeleniumEmulation.KeyState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.KeyEvent"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
            <param name="state">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object defining the state of modifier keys.</param>
            <param name="eventName">The name of the event to send.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.KeyEvent.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.KeyState">
            <summary>
            Defines the state of modifier keys.
            </summary>
        </member>
        <member name="P:Selenium.Internal.SeleniumEmulation.KeyState.AltKeyDown">
            <summary>
            Gets or sets a value indicating whether the Alt key is down.
            </summary>
        </member>
        <member name="P:Selenium.Internal.SeleniumEmulation.KeyState.ControlKeyDown">
            <summary>
            Gets or sets a value indicating whether the Control key is down.
            </summary>
        </member>
        <member name="P:Selenium.Internal.SeleniumEmulation.KeyState.ShiftKeyDown">
            <summary>
            Gets or sets a value indicating whether the Shift key is down.
            </summary>
        </member>
        <member name="P:Selenium.Internal.SeleniumEmulation.KeyState.MetaKeyDown">
            <summary>
            Gets or sets a value indicating whether the Meta key is down.
            </summary>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.MetaKeyDown">
            <summary>
            Defines the command for the metaKeyDown keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.MetaKeyDown.#ctor(Selenium.Internal.SeleniumEmulation.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.MetaKeyDown"/> class.
            </summary>
            <param name="keyState">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object tracking the state of modifier keys.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.MetaKeyDown.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.MetaKeyUp">
            <summary>
            Defines the command for the metaKeyUp keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.MetaKeyUp.#ctor(Selenium.Internal.SeleniumEmulation.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.MetaKeyUp"/> class.
            </summary>
            <param name="keyState">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object tracking the state of modifier keys.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.MetaKeyUp.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.MouseEvent">
            <summary>
            Defines the command for the mouseEvent keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.MouseEvent.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.MouseEvent"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
            <param name="eventType">Type of event to trigger.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.MouseEvent.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.MouseEventAt">
            <summary>
            Defines the command for the mouseEventAt keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.MouseEventAt.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.MouseEventAt"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
            <param name="eventType">The type of event to trigger.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.MouseEventAt.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.NoOp">
            <summary>
            Defines the command for the noOp keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.NoOp.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.NoOp"/> class.
            </summary>
            <param name="toReturn">An object to return as the result of the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.NoOp.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Open">
            <summary>
            Defines the command for the open keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Open.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Open"/> class.
            </summary>
            <param name="baseUrl">The base URL to open with the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Open.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.OpenWindow">
            <summary>
            Defines the command for the openWindow keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.OpenWindow.#ctor(Selenium.Internal.SeleniumEmulation.GetEval)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.OpenWindow"/> class.
            </summary>
            <param name="windowOpener">A <see cref="T:Selenium.Internal.SeleniumEmulation.GetEval"/> object that opens the window.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.OpenWindow.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Refresh">
            <summary>
            Defines the command for the refresh keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Refresh.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.RemoveAllSelections">
            <summary>
            Defines the command for the removeAllSelections keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.RemoveAllSelections.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.RemoveAllSelections"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.RemoveAllSelections.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.RemoveSelection">
            <summary>
            Defines the command for the removeSelection keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.RemoveSelection.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.RemoveSelection"/> class.
            </summary>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.RemoveSelection.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.RunScript">
            <summary>
            Defines the command for the runScript keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.RunScript.#ctor(Selenium.Internal.SeleniumEmulation.IScriptMutator)">
            <summary>
            Initializes a new instance of the RunScript class.
            </summary>
            <param name="mutator">The <see cref="T:Selenium.Internal.SeleniumEmulation.IScriptMutator"/> object to modify the 
            script so that WebDriver can use it.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.RunScript.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.SelectFrame">
            <summary>
            Defines the command for the selectFrame keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SelectFrame.#ctor(Selenium.Internal.SeleniumEmulation.WindowSelector)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.SelectFrame"/> class.
            </summary>
            <param name="windowSelector">An <see cref="T:Selenium.Internal.SeleniumEmulation.WindowSelector"/> object used to select windows.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SelectFrame.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.SelectOption">
            <summary>
            Defines the command for the selectOption keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SelectOption.#ctor(Selenium.Internal.AlertOverride,Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.SelectOption"/> class.
            </summary>
            <param name="alertOverride">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
            <param name="finder">The <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used in selecting the option.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SelectOption.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.SelectWindow">
            <summary>
            Defines the command for the selectWindow keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SelectWindow.#ctor(Selenium.Internal.SeleniumEmulation.WindowSelector)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.SelectWindow"/> class.
            </summary>
            <param name="windowSelector">An <see cref="T:Selenium.Internal.SeleniumEmulation.WindowSelector"/> object used to select windows.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SelectWindow.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.SeleneseCommand">
            <summary>
            Defines the base class for a command.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SeleneseCommand.Apply(OpenQA.Selenium.IWebDriver,System.String[])">
            <summary>
            Applies the arguments to the command.
            </summary>
            <param name="driver">The driver to use in executing the command.</param>
            <param name="args">The command arguments.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SeleneseCommand.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.SeleniumMutator">
            <summary>
            A mechanism for taking a script meant for Selenium Core
            and converting to something that webdriver can evaluate.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SeleniumMutator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.SeleniumMutator"/> class.
            </summary>
            <param name="method">The name of the atom to mutate.</param>
            <param name="atom">The source code of the atom to execute.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SeleniumMutator.Mutate(System.String,System.Text.StringBuilder)">
            <summary>
            Mutate an atom script so that it has the correct scope.
            The original, unmodified script is used to generate a script
            on the StringBuilder, the "ToString" method of which should be
            used to get the result. We make use of a StringBuilder rather than a
            normal String so that we can efficiently chain mutators.
            </summary>
            <param name="script">The original script.</param>
            <param name="outputTo">The mutated script.</param>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.SeleniumSelect">
            <summary>
            Provides a set of methods designed to help selecting options in select lists.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SeleniumSelect.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder,OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.SeleniumSelect"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used in finding options.</param>
            <param name="driver">An <see cref="T:OpenQA.Selenium.IWebDriver"/> used to drive the browser.</param>
            <param name="locator">A locator used to find options.</param>
        </member>
        <member name="P:Selenium.Internal.SeleniumEmulation.SeleniumSelect.AllOptions">
            <summary>
            Gets a collection of elements representing all options for the select list.
            </summary>
        </member>
        <member name="P:Selenium.Internal.SeleniumEmulation.SeleniumSelect.SelectedOptions">
            <summary>
            Gets a collection of elements representing all currently selected options for the select list.
            </summary>
        </member>
        <member name="P:Selenium.Internal.SeleniumEmulation.SeleniumSelect.IsMultiple">
            <summary>
            Gets a value indicating whether the select list supports multiple selections.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SeleniumSelect.SetSelected(System.String)">
            <summary>
            Selects the indicated option.
            </summary>
            <param name="optionLocator">The locator to use to find the option to select.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SeleniumSelect.AddSelection(System.String)">
            <summary>
            Adds a selection to the currently selected options.
            </summary>
            <param name="optionLocator">The locator to use to find the option to select.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SeleniumSelect.RemoveSelection(System.String)">
            <summary>
            Deselects a currently selected option.
            </summary>
            <param name="optionLocator">The locator to use to find the option to select.</param>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.SetNextConfirmationState">
            <summary>
            Defines the command for the setNextConfirmationState keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SetNextConfirmationState.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.SetNextConfirmationState"/> class.
            </summary>
            <param name="result"><see langword="true"/> to click OK the next confirmation; <see langword="false"/> to click Cancel.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SetNextConfirmationState.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.SetTimeout">
            <summary>
            Defines the command for the setTimeout keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SetTimeout.#ctor(Selenium.Internal.CommandTimer)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.SetTimeout"/> class.
            </summary>
            <param name="timer">The <see cref="T:Selenium.Internal.CommandTimer"/> object used to monitor timeouts for commands.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.SetTimeout.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.ShiftKeyDown">
            <summary>
            Defines the command for the shiftKeyDown keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ShiftKeyDown.#ctor(Selenium.Internal.SeleniumEmulation.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.ShiftKeyDown"/> class.
            </summary>
            <param name="keyState">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object tracking the state of modifier keys.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ShiftKeyDown.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.ShiftKeyUp">
            <summary>
            Defines the command for the shiftKeyUp keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ShiftKeyUp.#ctor(Selenium.Internal.SeleniumEmulation.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.ShiftKeyUp"/> class.
            </summary>
            <param name="keyState">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object tracking the state of modifier keys.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.ShiftKeyUp.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Submit">
            <summary>
            Defines the command for the submit keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Submit.#ctor(Selenium.Internal.AlertOverride,Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Submit"/> class.
            </summary>
            <param name="alert">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to override alerts displayed in an onSubmit event handler.</param>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Submit.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Type">
            <summary>
            Defines the command for the type keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Type.#ctor(Selenium.Internal.AlertOverride,Selenium.Internal.SeleniumEmulation.ElementFinder,Selenium.Internal.SeleniumEmulation.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Type"/> class.
            </summary>
            <param name="alertOverride">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
            <param name="keyState">A <see cref="T:Selenium.Internal.SeleniumEmulation.KeyState"/> object tracking the state of modifier keys.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Type.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.TypeKeys">
            <summary>
            Defines the command for the typeKeys keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.TypeKeys.#ctor(Selenium.Internal.AlertOverride,Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.TypeKeys"/> class.
            </summary>
            <param name="alertOverride">An <see cref="T:Selenium.Internal.AlertOverride"/> object used to handle JavaScript alerts.</param>
            <param name="elementFinder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.TypeKeys.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Uncheck">
            <summary>
            Defines the command for the uncheck keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Uncheck.#ctor(Selenium.Internal.SeleniumEmulation.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Uncheck"/> class.
            </summary>
            <param name="finder">An <see cref="T:Selenium.Internal.SeleniumEmulation.ElementFinder"/> used to find the element on which to execute the command.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Uncheck.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.VariableDeclaration">
            <summary>
            A mechanism for taking a variable declaration from a script meant for Selenium Core
            and converting to something that webdriver can evaluate.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.VariableDeclaration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.VariableDeclaration"/> class.
            </summary>
            <param name="raw">The raw term to mutate.</param>
            <param name="declaration">The declaration to which to set the term.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.VariableDeclaration.Mutate(System.String,System.Text.StringBuilder)">
            <summary>
            Mutate a script so that variable declarations have the correct scope.
            The original, unmodified script is used to generate a script
            on the StringBuilder, the "ToString" method of which should be
            used to get the result. We make use of a StringBuilder rather than a
            normal String so that we can efficiently chain mutators.
            </summary>
            <param name="script">The original script.</param>
            <param name="outputTo">The mutated script.</param>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Waiter">
            <summary>
            Provides methods to wait for a condition to be true.
            </summary>
        </member>
        <member name="F:Selenium.Internal.SeleniumEmulation.Waiter.DefaultTimeout">
            The amount of time to wait before giving up; the default is 30 seconds 
        </member>
        <member name="F:Selenium.Internal.SeleniumEmulation.Waiter.DefaultInterval">
            The interval to pause between checking; the default is 500 milliseconds 
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Waiter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Waiter"/> class.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Waiter.Wait(System.String)">
            <summary>
            Wait Until the "Until" condition returns true or time runs out.
            </summary>
            <param name="message">the failure message</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Waiter.Wait(System.String,System.Int64)">
            <summary>
            Wait Until the "Until" condition returns true or time runs out.
            </summary>
            <param name="message">the failure message</param>
            <param name="timeoutInMilliseconds">the amount of time to wait before giving up</param>
            <exception cref="T:Selenium.Internal.SeleniumEmulation.Waiter.WaitTimedOutException">if "Until" doesn't return true Until the timeout</exception>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Waiter.Wait(System.String,System.Int64,System.Int64)">
            <summary>
            Wait Until the "Until" condition returns true or time runs out.
            </summary>
            <param name="message">the failure message</param>
            <param name="timeoutInMilliseconds">the amount of time to wait before giving up</param>
            <param name="intervalInMilliseconds">intervalInMilliseconds the interval to pause between checking "Until"</param>
            <exception cref="T:Selenium.Internal.SeleniumEmulation.Waiter.WaitTimedOutException">if "Until" doesn't return true Until the timeout</exception>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Waiter.Until">
            <summary>
            The function called to wait for the condition
            </summary>
            <returns>Returns true when it's time to stop waiting </returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.Waiter.WaitTimedOutException">
            <summary>
            The exception that is thrown when the time allotted for a wait has expired.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Waiter.WaitTimedOutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Waiter.WaitTimedOutException"/> class with the specified error message.
            </summary>
            <param name="message">The message used as part of the exception.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.Waiter.WaitTimedOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.Waiter.WaitTimedOutException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WaitForCondition">
            <summary>
            Defines the command for the waitForCondition keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForCondition.#ctor(Selenium.Internal.SeleniumEmulation.IScriptMutator)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.WaitForCondition"/> class.
            </summary>
            <param name="mutator">An <see cref="T:Selenium.Internal.SeleniumEmulation.IScriptMutator"/> used to modify the script 
            into something WebDriver can parse.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForCondition.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WaitForCondition.ConditionWaiter">
            <summary>
            Provides methods to wait for a condition to be true.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForCondition.ConditionWaiter.#ctor(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.WaitForCondition.ConditionWaiter"/> class.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> object to use to wait.</param>
            <param name="script">The JavaScript script to use defining the wait condition.</param>
            <remarks>The JavaScript script must return a boolean (true or false) value.</remarks>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForCondition.ConditionWaiter.Until">
            <summary>
            The function called to wait for the condition
            </summary>
            <returns>Returns true when it's time to stop waiting.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad">
            <summary>
            Defines the command for the waitForPageToLoad keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad.ReadyStateWaiter">
            <summary>
            Provides methods to wait for the page ready state to be 'complete'.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad.ReadyStateWaiter.#ctor(OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad.ReadyStateWaiter"/> class.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> object to use to wait.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad.ReadyStateWaiter.Until">
            <summary>
            The function called to wait for the ready state to be 'complete'.
            </summary>
            <returns>Returns true when it's time to stop waiting.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad.LengthCheckingWaiter">
            <summary>
            Provides methods to wait for the page body has a length other than zero.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad.LengthCheckingWaiter.#ctor(OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad.LengthCheckingWaiter"/> class.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> object to use to wait.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForPageToLoad.LengthCheckingWaiter.Until">
            <summary>
            The function called to wait for the body text length to be greater than zero.
            </summary>
            <returns>Returns true when it's time to stop waiting.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WaitForPopup">
            <summary>
            Defines the command for the waitForPopup keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForPopup.#ctor(Selenium.Internal.SeleniumEmulation.WindowSelector)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.WaitForPopup"/> class.
            </summary>
            <param name="windowSelector">An <see cref="T:Selenium.Internal.SeleniumEmulation.WindowSelector"/> object used to select windows.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForPopup.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WaitForPopup.PopupWaiter">
            <summary>
            Provides methods to wait for a popup to appear.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForPopup.PopupWaiter.#ctor(OpenQA.Selenium.IWebDriver,System.String,Selenium.Internal.SeleniumEmulation.WindowSelector)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.WaitForPopup.PopupWaiter"/> class.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> object to use to wait.</param>
            <param name="windowId">The window ID used to identify the window.</param>
            <param name="windows">The <see cref="T:Selenium.Internal.SeleniumEmulation.WindowSelector"/> object used to select the window.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WaitForPopup.PopupWaiter.Until">
            <summary>
            The function called to wait for the condition
            </summary>
            <returns>Returns true when it's time to stop waiting.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WindowFocus">
            <summary>
            Defines the command for the windowFocus keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WindowFocus.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WindowMaximize">
            <summary>
            Defines the command for the windowMaximize keyword.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WindowMaximize.HandleSeleneseCommand(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Handles the command.
            </summary>
            <param name="driver">The driver used to execute the command.</param>
            <param name="locator">The first parameter to the command.</param>
            <param name="value">The second parameter to the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:Selenium.Internal.SeleniumEmulation.WindowSelector">
            <summary>
            Provides methods for selecting a window.
            </summary>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WindowSelector.#ctor(OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.Internal.SeleniumEmulation.WindowSelector"/> class.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> used in selecting the windows.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WindowSelector.SelectWindow(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Selects a window.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> used in selecting the windows.</param>
            <param name="windowId">The window ID to select.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WindowSelector.SelectFrame(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Selects a frame.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> used in selecting the windows.</param>
            <param name="locator">The locator used to select the frame.</param>
        </member>
        <member name="M:Selenium.Internal.SeleniumEmulation.WindowSelector.SelectBlankWindow(OpenQA.Selenium.IWebDriver)">
            <summary>
            Selects the only <code>_blank</code> window. A window open with
            <code>target='_blank'</code> will have a <code>window.name = null</code>. 
            </summary>
            <param name="driver">The driver to use to select the window.</param>
            <remarks>
            <para>This method assumes that there will only be one single
            <code>_blank</code> window and selects the first one with no name.
            Therefore if for any reasons there are multiple windows with
            <code>window.name = null</code> the first found one will be selected.
            </para>
            <para>If none of the windows have <code>window.name = null</code> the last
            selected one will be re-selected and a <see cref="T:Selenium.SeleniumException"/> will
            be thrown.
            </para>
            </remarks>
        </member>
        <member name="T:Selenium.ILookupStrategy">
            <summary>
            Provides methods for finding elements.
            </summary>
        </member>
        <member name="M:Selenium.ILookupStrategy.Find(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Finds an element.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> to use in finding the element.</param>
            <param name="use">The locator string to use.</param>
            <returns>An <see cref="T:OpenQA.Selenium.IWebElement"/> that matches the locator string.</returns>
        </member>
        <member name="T:Selenium.ISelenium">
            <summary>Defines an object that runs Selenium commands.
            
            <h3><a name="locators"></a>Element Locators</h3><p>
            Element Locators tell Selenium which HTML element a command refers to.
            The format of a locator is:</p><blockquote><em>locatorType</em><strong>=</strong><em>argument</em></blockquote><p>
            We support the following strategies for locating elements:
            </p><ul><li><strong>identifier</strong>=<em>id</em>: 
            Select the element with the specified @id attribute. If no match is
            found, select the first element whose @name attribute is <em>id</em>.
            (This is normally the default; see below.)</li><li><strong>id</strong>=<em>id</em>:
            Select the element with the specified @id attribute.</li><li><strong>name</strong>=<em>name</em>:
            Select the first element with the specified @name attribute.
            <ul class="first last simple"><li>username</li><li>name=username</li></ul><p>The name may optionally be followed by one or more <em>element-filters</em>, separated from the name by whitespace.  If the <em>filterType</em> is not specified, <strong>value</strong> is assumed.</p><ul class="first last simple"><li>name=flavour value=chocolate</li></ul></li><li><strong>dom</strong>=<em>javascriptExpression</em>: 
            
            Find an element by evaluating the specified string.  This allows you to traverse the HTML Document Object
            Model using JavaScript.  Note that you must not return a value in this string; simply make it the last expression in the block.
            <ul class="first last simple"><li>dom=document.forms['myForm'].myDropdown</li><li>dom=document.images[56]</li><li>dom=function foo() { return document.links[1]; }; foo();</li></ul></li><li><strong>xpath</strong>=<em>xpathExpression</em>: 
            Locate an element using an XPath expression.
            <ul class="first last simple"><li>xpath=//img[@alt='The image alt text']</li><li>xpath=//table[@id='table1']//tr[4]/td[2]</li><li>xpath=//a[contains(@href,'#id1')]</li><li>xpath=//a[contains(@href,'#id1')]/@class</li><li>xpath=(//table[@class='stylee'])//th[text()='theHeaderText']/../td</li><li>xpath=//input[@name='name2' and @value='yes']</li><li>xpath=//*[text()="right"]</li></ul></li><li><strong>link</strong>=<em>textPattern</em>:
            Select the link (anchor) element which contains text matching the
            specified <em>pattern</em>.
            <ul class="first last simple"><li>link=The link text</li></ul></li><li><strong>css</strong>=<em>cssSelectorSyntax</em>:
            Select the element using css selectors. Please refer to <a href="http://www.w3.org/TR/REC-CSS2/selector.html">CSS2 selectors</a>, <a href="http://www.w3.org/TR/2001/CR-css3-selectors-20011113/">CSS3 selectors</a> for more information. You can also check the TestCssLocators test in the selenium test suite for an example of usage, which is included in the downloaded selenium core package.
            <ul class="first last simple"><li>css=a[href="#id3"]</li><li>css=span#firstChild + span</li></ul><p>Currently the css selector locator supports all css1, css2 and css3 selectors except namespace in css3, some pseudo classes(:nth-of-type, :nth-last-of-type, :first-of-type, :last-of-type, :only-of-type, :visited, :hover, :active, :focus, :indeterminate) and pseudo elements(::first-line, ::first-letter, ::selection, ::before, ::after). </p></li><li><strong>ui</strong>=<em>uiSpecifierString</em>:
            Locate an element by resolving the UI specifier string to another locator, and evaluating it. See the <a href="http://svn.openqa.org/fisheye/browse/~raw,r=trunk/selenium/trunk/src/main/resources/core/scripts/ui-doc.html">Selenium UI-Element Reference</a> for more details.
            <ul class="first last simple"><li>ui=loginPages::loginButton()</li><li>ui=settingsPages::toggle(label=Hide Email)</li><li>ui=forumPages::postBody(index=2)//a[2]</li></ul></li></ul><p>
            Without an explicit locator prefix, Selenium uses the following default
            strategies:
            </p><ul class="simple"><li><strong>dom</strong>, for locators starting with "document."</li><li><strong>xpath</strong>, for locators starting with "//"</li><li><strong>identifier</strong>, otherwise</li></ul><h3><a name="element-filters">Element Filters</a></h3><blockquote><p>Element filters can be used with a locator to refine a list of candidate elements.  They are currently used only in the 'name' element-locator.</p><p>Filters look much like locators, ie.</p><blockquote><em>filterType</em><strong>=</strong><em>argument</em></blockquote><p>Supported element-filters are:</p><p><strong>value=</strong><em>valuePattern</em></p><blockquote>
            Matches elements based on their values.  This is particularly useful for refining a list of similarly-named toggle-buttons.</blockquote><p><strong>index=</strong><em>index</em></p><blockquote>
            Selects a single element based on its position in the list (offset from zero).</blockquote></blockquote><h3><a name="patterns"></a>String-match Patterns</h3><p>
            Various Pattern syntaxes are available for matching string values:
            </p><ul><li><strong>glob:</strong><em>pattern</em>:
            Match a string against a "glob" (aka "wildmat") pattern. "Glob" is a
            kind of limited regular-expression syntax typically used in command-line
            shells. In a glob pattern, "*" represents any sequence of characters, and "?"
            represents any single character. Glob patterns match against the entire
            string.</li><li><strong>regexp:</strong><em>regexp</em>:
            Match a string using a regular-expression. The full power of JavaScript
            regular-expressions is available.</li><li><strong>regexpi:</strong><em>regexpi</em>:
            Match a string using a case-insensitive regular-expression.</li><li><strong>exact:</strong><em>string</em>:
            
            Match a string exactly, verbatim, without any of that fancy wildcard
            stuff.</li></ul><p>
            If no pattern prefix is specified, Selenium assumes that it's a "glob"
            pattern.
            </p><p>
            For commands that return multiple values (such as verifySelectOptions),
            the string being matched is a comma-separated list of the return values,
            where both commas and backslashes in the values are backslash-escaped.
            When providing a pattern, the optional matching syntax (i.e. glob,
            regexp, etc.) is specified once, as usual, at the beginning of the
            pattern.
            </p>
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.SetExtensionJs(System.String)">
            <summary>
            Sets the extension Javascript for the session
            </summary>
            <param name="extensionJs">The extension JavaScript to use.</param>
        </member>
        <member name="M:Selenium.ISelenium.Start">
            <summary>
            Launches the browser with a new Selenium session
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.Stop">
            <summary>
            Ends the test session, killing the browser
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.Click(System.String)">
            <summary>Clicks on a link, button, checkbox or radio button. If the click action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </summary>
            <param name="locator">an element locator</param>
        </member>
        <member name="M:Selenium.ISelenium.DoubleClick(System.String)">
            <summary>Double clicks on a link, button, checkbox or radio button. If the double click action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </summary>
            <param name="locator">an element locator</param>
        </member>
        <member name="M:Selenium.ISelenium.ContextMenu(System.String)">
            <summary>Simulates opening the context menu for the specified element (as might happen if the user "right-clicked" on the element).
            </summary>
            <param name="locator">an element locator</param>
        </member>
        <member name="M:Selenium.ISelenium.ClickAt(System.String,System.String)">
            <summary>Clicks on a link, button, checkbox or radio button. If the click action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </summary>
            <param name="locator">an element locator</param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.ISelenium.DoubleClickAt(System.String,System.String)">
            <summary>Doubleclicks on a link, button, checkbox or radio button. If the action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </summary>
            <param name="locator">an element locator</param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.ISelenium.ContextMenuAt(System.String,System.String)">
            <summary>Simulates opening the context menu for the specified element (as might happen if the user "right-clicked" on the element).
            </summary>
            <param name="locator">an element locator</param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.ISelenium.FireEvent(System.String,System.String)">
            <summary>Explicitly simulate an event, to trigger the corresponding "on<em>event</em>"
            handler.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="eventName">the event name, e.g. "focus" or "blur"</param>
        </member>
        <member name="M:Selenium.ISelenium.Focus(System.String)">
            <summary>Move the focus to the specified element; for example, if the element is an input field, move the cursor to that field.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.KeyPress(System.String,System.String)">
            <summary>Simulates a user pressing and releasing a key.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="keySequence">Either be a string("\" followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: "w", "\119".</param>
        </member>
        <member name="M:Selenium.ISelenium.ShiftKeyDown">
            <summary>Press the shift key and hold it down until doShiftUp() is called or a new page is loaded.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.ShiftKeyUp">
            <summary>Release the shift key.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.MetaKeyDown">
            <summary>Press the meta key and hold it down until doMetaUp() is called or a new page is loaded.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.MetaKeyUp">
            <summary>Release the meta key.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.AltKeyDown">
            <summary>Press the alt key and hold it down until doAltUp() is called or a new page is loaded.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.AltKeyUp">
            <summary>Release the alt key.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.ControlKeyDown">
            <summary>Press the control key and hold it down until doControlUp() is called or a new page is loaded.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.ControlKeyUp">
            <summary>Release the control key.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.KeyDown(System.String,System.String)">
            <summary>Simulates a user pressing a key (without releasing it yet).
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="keySequence">Either be a string("\" followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: "w", "\119".</param>
        </member>
        <member name="M:Selenium.ISelenium.KeyUp(System.String,System.String)">
            <summary>Simulates a user releasing a key.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="keySequence">Either be a string("\" followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: "w", "\119".</param>
        </member>
        <member name="M:Selenium.ISelenium.MouseOver(System.String)">
            <summary>Simulates a user hovering a mouse over the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.MouseOut(System.String)">
            <summary>Simulates a user moving the mouse pointer away from the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.MouseDown(System.String)">
            <summary>Simulates a user pressing the left mouse button (without releasing it yet) on
            the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.MouseDownRight(System.String)">
            <summary>Simulates a user pressing the right mouse button (without releasing it yet) on
            the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.MouseDownAt(System.String,System.String)">
            <summary>Simulates a user pressing the left mouse button (without releasing it yet) at
            the specified location.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.ISelenium.MouseDownRightAt(System.String,System.String)">
            <summary>Simulates a user pressing the right mouse button (without releasing it yet) at
            the specified location.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.ISelenium.MouseUp(System.String)">
            <summary>Simulates the event that occurs when the user releases the mouse button (i.e., stops
            holding the button down) on the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.MouseUpRight(System.String)">
            <summary>Simulates the event that occurs when the user releases the right mouse button (i.e., stops
            holding the button down) on the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.MouseUpAt(System.String,System.String)">
            <summary>Simulates the event that occurs when the user releases the mouse button (i.e., stops
            holding the button down) at the specified location.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.ISelenium.MouseUpRightAt(System.String,System.String)">
            <summary>Simulates the event that occurs when the user releases the right mouse button (i.e., stops
            holding the button down) at the specified location.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.ISelenium.MouseMove(System.String)">
            <summary>Simulates a user pressing the mouse button (without releasing it yet) on
            the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.MouseMoveAt(System.String,System.String)">
            <summary>Simulates a user pressing the mouse button (without releasing it yet) on
            the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.ISelenium.Type(System.String,System.String)">
            <summary>Sets the value of an input field, as though you typed it in.
            
            <p>Can also be used to set the value of combo boxes, check boxes, etc. In these cases,
            value should be the value of the option selected, not the visible text.</p>
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="value">the value to type</param>
        </member>
        <member name="M:Selenium.ISelenium.TypeKeys(System.String,System.String)">
            <summary>Simulates keystroke events on the specified element, as though you typed the value key-by-key.
            
            <p>This is a convenience method for calling keyDown, keyUp, keyPress for every character in the specified string;
            this is useful for dynamic UI widgets (like auto-completing combo boxes) that require explicit key events.</p><p>Unlike the simple "type" command, which forces the specified value into the page directly, this command
            may or may not have any visible effect, even in cases where typing keys would normally have a visible effect.
            For example, if you use "typeKeys" on a form element, you may or may not see the results of what you typed in
            the field.</p><p>In some cases, you may need to use the simple "type" command to set the value of the field and then the "typeKeys" command to
            send the keystroke events corresponding to what you just typed.</p>
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="value">the value to type</param>
        </member>
        <member name="M:Selenium.ISelenium.SetSpeed(System.String)">
            <summary>Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation).  By default, there is no such delay, i.e.,
            the delay is 0 milliseconds.
            </summary>
            <param name="value">the number of milliseconds to pause after operation</param>
        </member>
        <member name="M:Selenium.ISelenium.GetSpeed">
            <summary>Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,
            the delay is 0 milliseconds.
            
            See also setSpeed.
            </summary>
            <returns>the execution speed in milliseconds.</returns>
        </member>
        <member name="M:Selenium.ISelenium.Check(System.String)">
            <summary>Check a toggle-button (checkbox/radio)
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.Uncheck(System.String)">
            <summary>Uncheck a toggle-button (checkbox/radio)
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.Select(System.String,System.String)">
            <summary>Select an option from a drop-down using an option locator.
            
            <p>
            Option locators provide different ways of specifying options of an HTML
            Select element (e.g. for selecting a specific option, or for asserting
            that the selected option satisfies a specification). There are several
            forms of Select Option Locator.
            </p><ul><li><strong>label</strong>=<em>labelPattern</em>:
            matches options based on their labels, i.e. the visible text. (This
            is the default.)
            <ul class="first last simple"><li>label=regexp:^[Oo]ther</li></ul></li><li><strong>value</strong>=<em>valuePattern</em>:
            matches options based on their values.
            <ul class="first last simple"><li>value=other</li></ul></li><li><strong>id</strong>=<em>id</em>:
            
            matches options based on their ids.
            <ul class="first last simple"><li>id=option1</li></ul></li><li><strong>index</strong>=<em>index</em>:
            matches an option based on its index (offset from zero).
            <ul class="first last simple"><li>index=2</li></ul></li></ul><p>
            If no option locator prefix is provided, the default behaviour is to match on <strong>label</strong>.
            </p>
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <param name="optionLocator">an option locator (a label by default)</param>
        </member>
        <member name="M:Selenium.ISelenium.AddSelection(System.String,System.String)">
            <summary>Add a selection to the set of selected options in a multi-select element using an option locator.
            
            @see #doSelect for details of option locators
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> identifying a multi-select box</param>
            <param name="optionLocator">an option locator (a label by default)</param>
        </member>
        <member name="M:Selenium.ISelenium.RemoveSelection(System.String,System.String)">
            <summary>Remove a selection from the set of selected options in a multi-select element using an option locator.
            
            @see #doSelect for details of option locators
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> identifying a multi-select box</param>
            <param name="optionLocator">an option locator (a label by default)</param>
        </member>
        <member name="M:Selenium.ISelenium.RemoveAllSelections(System.String)">
            <summary>Unselects all of the selected options in a multi-select element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> identifying a multi-select box</param>
        </member>
        <member name="M:Selenium.ISelenium.Submit(System.String)">
            <summary>Submit the specified form. This is particularly useful for forms without
            submit buttons, e.g. single-input "Search" forms.
            </summary>
            <param name="formLocator">an <a href="#locators">element locator</a> for the form you want to submit</param>
        </member>
        <member name="M:Selenium.ISelenium.Open(System.String)">
            <summary>Opens an URL in the test frame. This accepts both relative and absolute
            URLs.
            
            The "open" command waits for the page to load before proceeding,
            ie. the "AndWait" suffix is implicit.
            
            <em>Note</em>: The URL must be on the same domain as the runner HTML
            due to security restrictions in the browser (Same Origin Policy). If you
            need to open an URL on another domain, use the Selenium Server to start a
            new browser session on that domain.
            </summary>
            <param name="url">the URL to open; may be relative or absolute</param>
        </member>
        <member name="M:Selenium.ISelenium.OpenWindow(System.String,System.String)">
            <summary>Opens a popup window (if a window with that ID isn't already open).
            After opening the window, you'll need to select it using the selectWindow
            command.
            
            <p>This command can also be a useful workaround for bug SEL-339.  In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example).
            In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using
            an empty (blank) url, like this: openWindow("", "myFunnyWindow").</p>
            </summary>
            <param name="url">the URL to open, which can be blank</param>
            <param name="windowID">the JavaScript window ID of the window to select</param>
        </member>
        <member name="M:Selenium.ISelenium.SelectWindow(System.String)">
            <summary>Selects a popup window using a window locator; once a popup window has been selected, all
            commands go to that window. To select the main window again, use null
            as the target.
            
            <p>
            
            Window locators provide different ways of specifying the window object:
            by title, by internal JavaScript "name," or by JavaScript variable.
            </p><ul><li><strong>title</strong>=<em>My Special Window</em>:
            Finds the window using the text that appears in the title bar.  Be careful;
            two windows can share the same title.  If that happens, this locator will
            just pick one.
            </li><li><strong>name</strong>=<em>myWindow</em>:
            Finds the window using its internal JavaScript "name" property.  This is the second 
            parameter "windowName" passed to the JavaScript method window.open(url, windowName, windowFeatures, replaceFlag)
            (which Selenium intercepts).
            </li><li><strong>var</strong>=<em>variableName</em>:
            Some pop-up windows are unnamed (anonymous), but are associated with a JavaScript variable name in the current
            application window, e.g. "window.foo = window.open(url);".  In those cases, you can open the window using
            "var=foo".
            </li></ul><p>
            If no window locator prefix is provided, we'll try to guess what you mean like this:</p><p>1.) if windowID is null, (or the string "null") then it is assumed the user is referring to the original window instantiated by the browser).</p><p>2.) if the value of the "windowID" parameter is a JavaScript variable name in the current application window, then it is assumed
            that this variable contains the return value from a call to the JavaScript window.open() method.</p><p>3.) Otherwise, selenium looks in a hash it maintains that maps string names to window "names".</p><p>4.) If <em>that</em> fails, we'll try looping over all of the known windows to try to find the appropriate "title".
            Since "title" is not necessarily unique, this may have unexpected behavior.</p><p>If you're having trouble figuring out the name of a window that you want to manipulate, look at the Selenium log messages
            which identify the names of windows created via window.open (and therefore intercepted by Selenium).  You will see messages
            like the following for each window as it is opened:</p><p><code>debug: window.open call intercepted; window ID (which you can use with selectWindow()) is "myNewWindow"</code></p><p>In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example).
            (This is bug SEL-339.)  In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using
            an empty (blank) url, like this: openWindow("", "myFunnyWindow").</p>
            </summary>
            <param name="windowID">the JavaScript window ID of the window to select</param>
        </member>
        <member name="M:Selenium.ISelenium.SelectPopUp(System.String)">
            <summary>Simplifies the process of selecting a popup window (and does not offer
            functionality beyond what <code>selectWindow()</code> already provides).
            <ul><li>If <code>windowID</code> is either not specified, or specified as
            "null", the first non-top window is selected. The top window is the one
            that would be selected by <code>selectWindow()</code> without providing a
            <code>windowID</code> . This should not be used when more than one popup
            window is in play.</li><li>Otherwise, the window will be looked up considering
            <code>windowID</code> as the following in order: 1) the "name" of the
            window, as specified to <code>window.open()</code>; 2) a javascript
            variable which is a reference to a window; and 3) the title of the
            window. This is the same ordered lookup performed by
            <code>selectWindow</code> .</li></ul>
            </summary>
            <param name="windowID">an identifier for the popup window, which can take on a                  number of different meanings</param>
        </member>
        <member name="M:Selenium.ISelenium.DeselectPopUp">
            <summary>Selects the main window. Functionally equivalent to using
            <code>selectWindow()</code> and specifying no value for
            <code>windowID</code>.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.SelectFrame(System.String)">
            <summary>Selects a frame within the current window.  (You may invoke this command
            multiple times to select nested frames.)  To select the parent frame, use
            "relative=parent" as a locator; to select the top frame, use "relative=top".
            You can also select a frame by its 0-based index number; select the first frame with
            "index=0", or the third frame with "index=2".
            
            <p>You may also use a DOM expression to identify the frame you want directly,
            like this: <code>dom=frames["main"].frames["subframe"]</code></p>
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> identifying a frame or iframe</param>
        </member>
        <member name="M:Selenium.ISelenium.GetWhetherThisFrameMatchFrameExpression(System.String,System.String)">
            <summary>Determine whether current/locator identify the frame containing this running code.
            
            <p>This is useful in proxy injection mode, where this code runs in every
            browser frame and window, and sometimes the selenium server needs to identify
            the "current" frame.  In this case, when the test calls selectFrame, this
            routine is called for each frame to figure out which one has been selected.
            The selected frame will return true, while all others will return false.</p>
            </summary>
            <param name="currentFrameString">starting frame</param>
            <param name="target">new frame (which might be relative to the current one)</param>
            <returns>true if the new frame is this code's window</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetWhetherThisWindowMatchWindowExpression(System.String,System.String)">
            <summary>Determine whether currentWindowString plus target identify the window containing this running code.
            
            <p>This is useful in proxy injection mode, where this code runs in every
            browser frame and window, and sometimes the selenium server needs to identify
            the "current" window.  In this case, when the test calls selectWindow, this
            routine is called for each window to figure out which one has been selected.
            The selected window will return true, while all others will return false.</p>
            </summary>
            <param name="currentWindowString">starting window</param>
            <param name="target">new window (which might be relative to the current one, e.g., "_parent")</param>
            <returns>true if the new window is this code's window</returns>
        </member>
        <member name="M:Selenium.ISelenium.WaitForPopUp(System.String,System.String)">
            <summary>Waits for a popup window to appear and load up.
            </summary>
            <param name="windowID">the JavaScript window "name" of the window that will appear (not the text of the title bar)                 If unspecified, or specified as "null", this command will                 wait for the first non-top window to appear (don't rely                 on this if you are working with multiple popups                 simultaneously).</param>
            <param name="timeout">a timeout in milliseconds, after which the action will return with an error.                If this value is not specified, the default Selenium                timeout will be used. See the setTimeout() command.</param>
        </member>
        <member name="M:Selenium.ISelenium.ChooseCancelOnNextConfirmation">
            <summary><p>
            By default, Selenium's overridden window.confirm() function will
            return true, as if the user had manually clicked OK; after running
            this command, the next call to confirm() will return false, as if
            the user had clicked Cancel.  Selenium will then resume using the
            default behavior for future confirmations, automatically returning 
            true (OK) unless/until you explicitly call this command for each
            confirmation.
            </p><p>
            Take note - every time a confirmation comes up, you must
            consume it with a corresponding getConfirmation, or else
            the next selenium operation will fail.
            </p>
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.ChooseOkOnNextConfirmation">
            <summary><p>
            Undo the effect of calling chooseCancelOnNextConfirmation.  Note
            that Selenium's overridden window.confirm() function will normally automatically
            return true, as if the user had manually clicked OK, so you shouldn't
            need to use this command unless for some reason you need to change
            your mind prior to the next confirmation.  After any confirmation, Selenium will resume using the
            default behavior for future confirmations, automatically returning 
            true (OK) unless/until you explicitly call chooseCancelOnNextConfirmation for each
            confirmation.
            </p><p>
            Take note - every time a confirmation comes up, you must
            consume it with a corresponding getConfirmation, or else
            the next selenium operation will fail.
            </p>
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.AnswerOnNextPrompt(System.String)">
            <summary>Instructs Selenium to return the specified answer string in response to
            the next JavaScript prompt [window.prompt()].
            </summary>
            <param name="answer">the answer to give in response to the prompt pop-up</param>
        </member>
        <member name="M:Selenium.ISelenium.GoBack">
            <summary>Simulates the user clicking the "back" button on their browser.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.Refresh">
            <summary>Simulates the user clicking the "Refresh" button on their browser.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.Close">
            <summary>Simulates the user clicking the "close" button in the titlebar of a popup
            window or tab.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.IsAlertPresent">
            <summary>Has an alert occurred?
            
            <p>
            This function never throws an exception
            </p>
            </summary>
            <returns>true if there is an alert</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsPromptPresent">
            <summary>Has a prompt occurred?
            
            <p>
            This function never throws an exception
            </p>
            </summary>
            <returns>true if there is a pending prompt</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsConfirmationPresent">
            <summary>Has confirm() been called?
            
            <p>
            This function never throws an exception
            </p>
            </summary>
            <returns>true if there is a pending confirmation</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetAlert">
            <summary>Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.
            
            <p>Getting an alert has the same effect as manually clicking OK. If an
            alert is generated but you do not consume it with getAlert, the next Selenium action
            will fail.</p><p>Under Selenium, JavaScript alerts will NOT pop up a visible alert
            dialog.</p><p>Selenium does NOT support JavaScript alerts that are generated in a
            page's onload() event handler. In this case a visible dialog WILL be
            generated and Selenium will hang until someone manually clicks OK.</p>
            </summary>
            <returns>The message of the most recent JavaScript alert</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetConfirmation">
            <summary>Retrieves the message of a JavaScript confirmation dialog generated during
            the previous action.
            
            <p>
            By default, the confirm function will return true, having the same effect
            as manually clicking OK. This can be changed by prior execution of the
            chooseCancelOnNextConfirmation command. 
            </p><p>
            If an confirmation is generated but you do not consume it with getConfirmation,
            the next Selenium action will fail.
            </p><p>
            NOTE: under Selenium, JavaScript confirmations will NOT pop up a visible
            dialog.
            </p><p>
            NOTE: Selenium does NOT support JavaScript confirmations that are
            generated in a page's onload() event handler. In this case a visible
            dialog WILL be generated and Selenium will hang until you manually click
            OK.
            </p>
            </summary>
            <returns>the message of the most recent JavaScript confirmation dialog</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetPrompt">
            <summary>Retrieves the message of a JavaScript question prompt dialog generated during
            the previous action.
            
            <p>Successful handling of the prompt requires prior execution of the
            answerOnNextPrompt command. If a prompt is generated but you
            do not get/verify it, the next Selenium action will fail.</p><p>NOTE: under Selenium, JavaScript prompts will NOT pop up a visible
            dialog.</p><p>NOTE: Selenium does NOT support JavaScript prompts that are generated in a
            page's onload() event handler. In this case a visible dialog WILL be
            generated and Selenium will hang until someone manually clicks OK.</p>
            </summary>
            <returns>the message of the most recent JavaScript question prompt</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetLocation">
            <summary>Gets the absolute URL of the current page.
            </summary>
            <returns>the absolute URL of the current page</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetTitle">
            <summary>Gets the title of the current page.
            </summary>
            <returns>the title of the current page</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetBodyText">
            <summary>Gets the entire text of the page.
            </summary>
            <returns>the entire text of the page</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetValue(System.String)">
            <summary>Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).
            For checkbox/radio elements, the value will be "on" or "off" depending on
            whether the element is checked or not.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>the element value, or "on/off" for checkbox/radio elements</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetText(System.String)">
            <summary>Gets the text of an element. This works for any element that contains
            text. This command uses either the textContent (Mozilla-like browsers) or
            the innerText (IE-like browsers) of the element, which is the rendered
            text shown to the user.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>the text of the element</returns>
        </member>
        <member name="M:Selenium.ISelenium.Highlight(System.String)">
            <summary>Briefly changes the backgroundColor of the specified element yellow.  Useful for debugging.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.ISelenium.GetEval(System.String)">
            <summary>Gets the result of evaluating the specified JavaScript snippet.  The snippet may
            have multiple lines, but only the result of the last line will be returned.
            
            <p>Note that, by default, the snippet will run in the context of the "selenium"
            object itself, so <code>this</code> will refer to the Selenium object.  Use <code>window</code> to
            refer to the window of your application, e.g. <code>window.document.getElementById('foo')</code></p><p>If you need to use
            a locator to refer to a single element in your application page, you can
            use <code>this.browserbot.findElement("id=foo")</code> where "id=foo" is your locator.</p>
            </summary>
            <param name="script">the JavaScript snippet to run</param>
            <returns>the results of evaluating the snippet</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsChecked(System.String)">
            <summary>Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to a checkbox or radio button</param>
            <returns>true if the checkbox is checked, false otherwise</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetTable(System.String)">
            <summary>Gets the text from a cell of a table. The cellAddress syntax
            tableLocator.row.column, where row and column start at 0.
            </summary>
            <param name="tableCellAddress">a cell address, e.g. "foo.1.4"</param>
            <returns>the text from the specified cell</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetSelectedLabels(System.String)">
            <summary>Gets all option labels (visible text) for selected options in the specified select or multi-select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all selected option labels in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetSelectedLabel(System.String)">
            <summary>Gets option label (visible text) for selected option in the specified select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>the selected option label in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetSelectedValues(System.String)">
            <summary>Gets all option values (value attributes) for selected options in the specified select or multi-select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all selected option values in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetSelectedValue(System.String)">
            <summary>Gets option value (value attribute) for selected option in the specified select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>the selected option value in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetSelectedIndexes(System.String)">
            <summary>Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all selected option indexes in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetSelectedIndex(System.String)">
            <summary>Gets option index (option number, starting at 0) for selected option in the specified select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>the selected option index in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetSelectedIds(System.String)">
            <summary>Gets all option element IDs for selected options in the specified select or multi-select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all selected option IDs in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetSelectedId(System.String)">
            <summary>Gets option element ID for selected option in the specified select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>the selected option ID in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsSomethingSelected(System.String)">
            <summary>Determines whether some option in a drop-down menu is selected.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>true if some option has been selected, false otherwise</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetSelectOptions(System.String)">
            <summary>Gets all option labels in the specified select drop-down.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all option labels in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetAttribute(System.String)">
            <summary>Gets the value of an element attribute. The value of the attribute may
            differ across browsers (this is the case for the "style" attribute, for
            example).
            </summary>
            <param name="attributeLocator">an element locator followed by an @ sign and then the name of the attribute, e.g. "foo@bar"</param>
            <returns>the value of the specified attribute</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsTextPresent(System.String)">
            <summary>Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.
            </summary>
            <param name="pattern">a <a href="#patterns">pattern</a> to match with the text of the page</param>
            <returns>true if the pattern matches the text, false otherwise</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsElementPresent(System.String)">
            <summary>Verifies that the specified element is somewhere on the page.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>true if the element is present, false otherwise</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsVisible(System.String)">
            <summary>Determines if the specified element is visible. An
            element can be rendered invisible by setting the CSS "visibility"
            property to "hidden", or the "display" property to "none", either for the
            element itself or one if its ancestors.  This method will fail if
            the element is not present.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>true if the specified element is visible, false otherwise</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsEditable(System.String)">
            <summary>Determines whether the specified input element is editable, ie hasn't been disabled.
            This method will fail if the specified element isn't an input element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>true if the input element is editable, false otherwise</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetAllButtons">
            <summary>Returns the IDs of all buttons on the page.
            
            <p>If a given button has no ID, it will appear as "" in this array.</p>
            </summary>
            <returns>the IDs of all buttons on the page</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetAllLinks">
            <summary>Returns the IDs of all links on the page.
            
            <p>If a given link has no ID, it will appear as "" in this array.</p>
            </summary>
            <returns>the IDs of all links on the page</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetAllFields">
            <summary>Returns the IDs of all input fields on the page.
            
            <p>If a given field has no ID, it will appear as "" in this array.</p>
            </summary>
            <returns>the IDs of all field on the page</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetAttributeFromAllWindows(System.String)">
            <summary>Returns an array of JavaScript property values from all known windows having one.
            </summary>
            <param name="attributeName">name of an attribute on the windows</param>
            <returns>the set of values of this attribute from all known windows.</returns>
        </member>
        <member name="M:Selenium.ISelenium.Dragdrop(System.String,System.String)">
            <summary>deprecated - use dragAndDrop instead
            </summary>
            <param name="locator">an element locator</param>
            <param name="movementsString">offset in pixels from the current location to which the element should be moved, e.g., "+70,-300"</param>
        </member>
        <member name="M:Selenium.ISelenium.SetMouseSpeed(System.String)">
            <summary>Configure the number of pixels between "mousemove" events during dragAndDrop commands (default=10).
            <p>Setting this value to 0 means that we'll send a "mousemove" event to every single pixel
            in between the start location and the end location; that can be very slow, and may
            cause some browsers to force the JavaScript to timeout.</p><p>If the mouse speed is greater than the distance between the two dragged objects, we'll
            just send one "mousemove" at the start location and then one final one at the end location.</p>
            </summary>
            <param name="pixels">the number of pixels between "mousemove" events</param>
        </member>
        <member name="M:Selenium.ISelenium.GetMouseSpeed">
            <summary>Returns the number of pixels between "mousemove" events during dragAndDrop commands (default=10).
            </summary>
            <returns>the number of pixels between "mousemove" events during dragAndDrop commands (default=10)</returns>
        </member>
        <member name="M:Selenium.ISelenium.DragAndDrop(System.String,System.String)">
            <summary>Drags an element a certain distance and then drops it
            </summary>
            <param name="locator">an element locator</param>
            <param name="movementsString">offset in pixels from the current location to which the element should be moved, e.g., "+70,-300"</param>
        </member>
        <member name="M:Selenium.ISelenium.DragAndDropToObject(System.String,System.String)">
            <summary>Drags an element and drops it on another element
            </summary>
            <param name="locatorOfObjectToBeDragged">an element to be dragged</param>
            <param name="locatorOfDragDestinationObject">an element whose location (i.e., whose center-most pixel) will be the point where locatorOfObjectToBeDragged  is dropped</param>
        </member>
        <member name="M:Selenium.ISelenium.WindowFocus">
            <summary>Gives focus to the currently selected window
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.WindowMaximize">
            <summary>Resize currently selected window to take up the entire screen
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.GetAllWindowIds">
            <summary>Returns the IDs of all windows that the browser knows about in an array.
            </summary>
            <returns>Array of identifiers of all windows that the browser knows about.</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetAllWindowNames">
            <summary>Returns the names of all windows that the browser knows about in an array.
            </summary>
            <returns>Array of names of all windows that the browser knows about.</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetAllWindowTitles">
            <summary>Returns the titles of all windows that the browser knows about in an array.
            </summary>
            <returns>Array of titles of all windows that the browser knows about.</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetHtmlSource">
            <summary>Returns the entire HTML source between the opening and
            closing "html" tags.
            </summary>
            <returns>the entire HTML source</returns>
        </member>
        <member name="M:Selenium.ISelenium.SetCursorPosition(System.String,System.String)">
            <summary>Moves the text cursor to the specified position in the given input element or textarea.
            This method will fail if the specified element isn't an input element or textarea.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an input element or textarea</param>
            <param name="position">the numerical position of the cursor in the field; position should be 0 to move the position to the beginning of the field.  You can also set the cursor to -1 to move it to the end of the field.</param>
        </member>
        <member name="M:Selenium.ISelenium.GetElementIndex(System.String)">
            <summary>Get the relative index of an element to its parent (starting from 0). The comment node and empty text node
            will be ignored.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element</param>
            <returns>of relative index of the element to its parent (starting from 0)</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsOrdered(System.String,System.String)">
            <summary>Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will
            not be considered ordered.
            </summary>
            <param name="locator1">an <a href="#locators">element locator</a> pointing to the first element</param>
            <param name="locator2">an <a href="#locators">element locator</a> pointing to the second element</param>
            <returns>true if element1 is the previous sibling of element2, false otherwise</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetElementPositionLeft(System.String)">
            <summary>Retrieves the horizontal position of an element
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element OR an element itself</param>
            <returns>of pixels from the edge of the frame.</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetElementPositionTop(System.String)">
            <summary>Retrieves the vertical position of an element
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element OR an element itself</param>
            <returns>of pixels from the edge of the frame.</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetElementWidth(System.String)">
            <summary>Retrieves the width of an element
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element</param>
            <returns>width of an element in pixels</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetElementHeight(System.String)">
            <summary>Retrieves the height of an element
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element</param>
            <returns>height of an element in pixels</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetCursorPosition(System.String)">
            <summary>Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.
            
            <p>Specifically, if the cursor/selection has been cleared by JavaScript, this command will tend to
            return the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as <a href="http://jira.openqa.org/browse/SEL-243">SEL-243</a>.</p>
            This method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an input element or textarea</param>
            <returns>the numerical position of the cursor in the field</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetExpression(System.String)">
            <summary>Returns the specified expression.
            
            <p>This is useful because of JavaScript preprocessing.
            It is used to generate commands like assertExpression and waitForExpression.</p>
            </summary>
            <param name="expression">the value to return</param>
            <returns>the value passed in</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetXpathCount(System.String)">
            <summary>Returns the number of nodes that match the specified xpath, eg. "//table" would give
            the number of tables.
            </summary>
            <param name="xpath">the xpath expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.</param>
            <returns>the number of nodes that match the specified xpath</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetCSSCount(System.String)">
            <summary>Returns the number of nodes that match the specified css, eg. "css=table" would give
            the number of tables.
            </summary>
            <param name="cssLocator">the css path expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.</param>
            <returns>the number of nodes that match the specified css locator</returns>
        </member>
        <member name="M:Selenium.ISelenium.AssignId(System.String,System.String)">
            <summary>Temporarily sets the "id" attribute of the specified element, so you can locate it in the future
            using its ID rather than a slow/complicated XPath.  This ID will disappear once the page is
            reloaded.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element</param>
            <param name="identifier">a string to be used as the ID of the specified element</param>
        </member>
        <member name="M:Selenium.ISelenium.AllowNativeXpath(System.String)">
            <summary>Specifies whether Selenium should use the native in-browser implementation
            of XPath (if any native version is available); if you pass "false" to
            this function, we will always use our pure-JavaScript xpath library.
            Using the pure-JS xpath library can improve the consistency of xpath
            element locators between different browser vendors, but the pure-JS
            version is much slower than the native implementations.
            </summary>
            <param name="allow">boolean, true means we'll prefer to use native XPath; false means we'll only use JS XPath</param>
        </member>
        <member name="M:Selenium.ISelenium.IgnoreAttributesWithoutValue(System.String)">
            <summary>Specifies whether Selenium will ignore xpath attributes that have no
            value, i.e. are the empty string, when using the non-native xpath
            evaluation engine. You'd want to do this for performance reasons in IE.
            However, this could break certain xpaths, for example an xpath that looks
            for an attribute whose value is NOT the empty string.
            
            The hope is that such xpaths are relatively rare, but the user should
            have the option of using them. Note that this only influences xpath
            evaluation when using the ajaxslt engine (i.e. not "javascript-xpath").
            </summary>
            <param name="ignore">boolean, true means we'll ignore attributes without value                        at the expense of xpath "correctness"; false means                        we'll sacrifice speed for correctness.</param>
        </member>
        <member name="M:Selenium.ISelenium.WaitForCondition(System.String,System.String)">
            <summary>Runs the specified JavaScript snippet repeatedly until it evaluates to "true".
            The snippet may have multiple lines, but only the result of the last line
            will be considered.
            
            <p>Note that, by default, the snippet will be run in the runner's test window, not in the window
            of your application.  To get the window of your application, you can use
            the JavaScript snippet <code>selenium.browserbot.getCurrentWindow()</code>, and then
            run your JavaScript in there</p>
            </summary>
            <param name="script">the JavaScript snippet to run</param>
            <param name="timeout">a timeout in milliseconds, after which this command will return with an error</param>
        </member>
        <member name="M:Selenium.ISelenium.SetTimeout(System.String)">
            <summary>Specifies the amount of time that Selenium will wait for actions to complete.
            
            <p>Actions that require waiting include "open" and the "waitFor*" actions.</p>
            The default timeout is 30 seconds.
            </summary>
            <param name="timeout">a timeout in milliseconds, after which the action will return with an error</param>
        </member>
        <member name="M:Selenium.ISelenium.WaitForPageToLoad(System.String)">
            <summary>Waits for a new page to load.
            
            <p>You can use this command instead of the "AndWait" suffixes, "clickAndWait", "selectAndWait", "typeAndWait" etc.
            (which are only available in the JS API).</p><p>Selenium constantly keeps track of new pages loading, and sets a "newPageLoaded"
            flag when it first notices a page load.  Running any other Selenium command after
            turns the flag to false.  Hence, if you want to wait for a page to load, you must
            wait immediately after a Selenium command that caused a page-load.</p>
            </summary>
            <param name="timeout">a timeout in milliseconds, after which this command will return with an error</param>
        </member>
        <member name="M:Selenium.ISelenium.WaitForFrameToLoad(System.String,System.String)">
            <summary>Waits for a new frame to load.
            
            <p>Selenium constantly keeps track of new pages and frames loading, 
            and sets a "newPageLoaded" flag when it first notices a page load.</p>
            
            See waitForPageToLoad for more information.
            </summary>
            <param name="frameAddress">FrameAddress from the server side</param>
            <param name="timeout">a timeout in milliseconds, after which this command will return with an error</param>
        </member>
        <member name="M:Selenium.ISelenium.GetCookie">
            <summary>Return all cookies of the current page under test.
            </summary>
            <returns>all cookies of the current page under test</returns>
        </member>
        <member name="M:Selenium.ISelenium.GetCookieByName(System.String)">
            <summary>Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.
            </summary>
            <param name="name">the name of the cookie</param>
            <returns>the value of the cookie</returns>
        </member>
        <member name="M:Selenium.ISelenium.IsCookiePresent(System.String)">
            <summary>Returns true if a cookie with the specified name is present, or false otherwise.
            </summary>
            <param name="name">the name of the cookie</param>
            <returns>true if a cookie with the specified name is present, or false otherwise.</returns>
        </member>
        <member name="M:Selenium.ISelenium.CreateCookie(System.String,System.String)">
            <summary>Create a new cookie whose path and domain are same with those of current page
            under test, unless you specified a path for this cookie explicitly.
            </summary>
            <param name="nameValuePair">name and value of the cookie in a format "name=value"</param>
            <param name="optionsString">options for the cookie. Currently supported options include 'path', 'max_age' and 'domain'.      the optionsString's format is "path=/path/, max_age=60, domain=.foo.com". The order of options are irrelevant, the unit      of the value of 'max_age' is second.  Note that specifying a domain that isn't a subset of the current domain will      usually fail.</param>
        </member>
        <member name="M:Selenium.ISelenium.DeleteCookie(System.String,System.String)">
            <summary>Delete a named cookie with specified path and domain.  Be careful; to delete a cookie, you
            need to delete it using the exact same path and domain that were used to create the cookie.
            If the path is wrong, or the domain is wrong, the cookie simply won't be deleted.  Also
            note that specifying a domain that isn't a subset of the current domain will usually fail.
            
            Since there's no way to discover at runtime the original path and domain of a given cookie,
            we've added an option called 'recurse' to try all sub-domains of the current domain with
            all paths that are a subset of the current path.  Beware; this option can be slow.  In
            big-O notation, it operates in O(n*m) time, where n is the number of dots in the domain
            name and m is the number of slashes in the path.
            </summary>
            <param name="name">the name of the cookie to be deleted</param>
            <param name="optionsString">options for the cookie. Currently supported options include 'path', 'domain'      and 'recurse.' The optionsString's format is "path=/path/, domain=.foo.com, recurse=true".      The order of options are irrelevant. Note that specifying a domain that isn't a subset of      the current domain will usually fail.</param>
        </member>
        <member name="M:Selenium.ISelenium.DeleteAllVisibleCookies">
            <summary>Calls deleteCookie with recurse=true on all cookies visible to the current page.
            As noted on the documentation for deleteCookie, recurse=true can be much slower
            than simply deleting the cookies using a known domain/path.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.SetBrowserLogLevel(System.String)">
            <summary>Sets the threshold for browser-side logging messages; log messages beneath this threshold will be discarded.
            Valid logLevel strings are: "debug", "info", "warn", "error" or "off".
            To see the browser logs, you need to
            either show the log window in GUI mode, or enable browser-side logging in Selenium RC.
            </summary>
            <param name="logLevel">one of the following: "debug", "info", "warn", "error" or "off"</param>
        </member>
        <member name="M:Selenium.ISelenium.RunScript(System.String)">
            <summary>Creates a new "script" tag in the body of the current test window, and 
            adds the specified text into the body of the command.  Scripts run in
            this way can often be debugged more easily than scripts executed using
            Selenium's "getEval" command.  Beware that JS exceptions thrown in these script
            tags aren't managed by Selenium, so you should probably wrap your script
            in try/catch blocks if there is any chance that the script will throw
            an exception.
            </summary>
            <param name="script">the JavaScript snippet to run</param>
        </member>
        <member name="M:Selenium.ISelenium.AddLocationStrategy(System.String,System.String)">
            <summary>Defines a new function for Selenium to locate elements on the page.
            For example,
            if you define the strategy "foo", and someone runs click("foo=blah"), we'll
            run your function, passing you the string "blah", and click on the element 
            that your function
            returns, or throw an "Element not found" error if your function returns null.
            
            We'll pass three arguments to your function:
            <ul><li>locator: the string the user passed in</li><li>inWindow: the currently selected window</li><li>inDocument: the currently selected document</li></ul>
            The function must return null if the element can't be found.
            </summary>
            <param name="strategyName">the name of the strategy to define; this should use only   letters [a-zA-Z] with no spaces or other punctuation.</param>
            <param name="functionDefinition">a string defining the body of a function in JavaScript.   For example: <code>return inDocument.getElementById(locator);</code></param>
        </member>
        <member name="M:Selenium.ISelenium.CaptureEntirePageScreenshot(System.String,System.String)">
            <summary>Saves the entire contents of the current window canvas to a PNG file.
            Contrast this with the captureScreenshot command, which captures the
            contents of the OS viewport (i.e. whatever is currently being displayed
            on the monitor), and is implemented in the RC only. Currently this only
            works in Firefox when running in chrome mode, and in IE non-HTA using
            the EXPERIMENTAL "Snapsie" utility. The Firefox implementation is mostly
            borrowed from the Screengrab! Firefox extension. Please see
            http://www.screengrab.org and http://snapsie.sourceforge.net/ for
            details.
            </summary>
            <param name="filename">the path to the file to persist the screenshot as. No                  filename extension will be appended by default.                  Directories will not be created if they do not exist,                    and an exception will be thrown, possibly by native                  code.</param>
            <param name="kwargs">a kwargs string that modifies the way the screenshot                  is captured. Example: "background=#CCFFDD" .                  Currently valid options:                  <dl><dt>background</dt><dd>the background CSS for the HTML document. This                     may be useful to set for capturing screenshots of                     less-than-ideal layouts, for example where absolute                     positioning causes the calculation of the canvas                     dimension to fail and a black background is exposed                     (possibly obscuring black text).</dd></dl></param>
        </member>
        <member name="M:Selenium.ISelenium.Rollup(System.String,System.String)">
            <summary>Executes a command rollup, which is a series of commands with a unique
            name, and optionally arguments that control the generation of the set of
            commands. If any one of the rolled-up commands fails, the rollup is
            considered to have failed. Rollups may also contain nested rollups.
            </summary>
            <param name="rollupName">the name of the rollup command</param>
            <param name="kwargs">keyword arguments string that influences how the                    rollup expands into commands</param>
        </member>
        <member name="M:Selenium.ISelenium.AddScript(System.String,System.String)">
            <summary>Loads script content into a new script tag in the Selenium document. This
            differs from the runScript command in that runScript adds the script tag
            to the document of the AUT, not the Selenium document. The following
            entities in the script content are replaced by the characters they
            represent:
            
                &lt;
                &gt;
                &amp;
            
            The corresponding remove command is removeScript.
            </summary>
            <param name="scriptContent">the Javascript content of the script to add</param>
            <param name="scriptTagId">(optional) the id of the new script tag. If                       specified, and an element with this id already                       exists, this operation will fail.</param>
        </member>
        <member name="M:Selenium.ISelenium.RemoveScript(System.String)">
            <summary>Removes a script tag from the Selenium document identified by the given
            id. Does nothing if the referenced tag doesn't exist.
            </summary>
            <param name="scriptTagId">the id of the script element to remove.</param>
        </member>
        <member name="M:Selenium.ISelenium.UseXpathLibrary(System.String)">
            <summary>Allows choice of one of the available libraries.
            </summary>
            <param name="libraryName">name of the desired library Only the following three can be chosen: <ul><li>"ajaxslt" - Google's library</li><li>"javascript-xpath" - Cybozu Labs' faster library</li><li>"default" - The default library.  Currently the default library is "ajaxslt" .</li></ul> If libraryName isn't one of these three, then  no change will be made.</param>
        </member>
        <member name="M:Selenium.ISelenium.SetContext(System.String)">
            <summary>Writes a message to the status bar and adds a note to the browser-side
            log.
            </summary>
            <param name="context">the message to be sent to the browser</param>
        </member>
        <member name="M:Selenium.ISelenium.AttachFile(System.String,System.String)">
            <summary>Sets a file input (upload) field to the file listed in fileLocator
            </summary>
            <param name="fieldLocator">an <a href="#locators">element locator</a></param>
            <param name="fileLocator">a URL pointing to the specified file. Before the file  can be set in the input field (fieldLocator), Selenium RC may need to transfer the file    to the local machine before attaching the file in a web page form. This is common in selenium  grid configurations where the RC server driving the browser is not the same  machine that started the test.   Supported Browsers: Firefox ("*chrome") only.</param>
        </member>
        <member name="M:Selenium.ISelenium.CaptureScreenshot(System.String)">
            <summary>Captures a PNG screenshot to the specified file.
            </summary>
            <param name="filename">the absolute path to the file to be written, e.g. "c:\blah\screenshot.png"</param>
        </member>
        <member name="M:Selenium.ISelenium.CaptureScreenshotToString">
            <summary>Capture a PNG screenshot.  It then returns the file as a base 64 encoded string.
            </summary>
            <returns>The base 64 encoded string of the screen shot (PNG file)</returns>
        </member>
        <member name="M:Selenium.ISelenium.CaptureEntirePageScreenshotToString(System.String)">
            <summary>Downloads a screenshot of the browser current window canvas to a 
            based 64 encoded PNG file. The <em>entire</em> windows canvas is captured,
            including parts rendered outside of the current view port.
            
            Currently this only works in Mozilla and when running in chrome mode.
            </summary>
            <param name="kwargs">A kwargs string that modifies the way the screenshot is captured. Example: "background=#CCFFDD". This may be useful to set for capturing screenshots of less-than-ideal layouts, for example where absolute positioning causes the calculation of the canvas dimension to fail and a black background is exposed  (possibly obscuring black text).</param>
            <returns>The base 64 encoded string of the page screenshot (PNG file)</returns>
        </member>
        <member name="M:Selenium.ISelenium.ShutDownSeleniumServer">
            <summary>Kills the running Selenium Server and all browser sessions.  After you run this command, you will no longer be able to send
            commands to the server; you can't remotely start the server once it has been stopped.  Normally
            you should prefer to run the "stop" command, which terminates the current browser session, rather than 
            shutting down the entire server.
            </summary>
        </member>
        <member name="M:Selenium.ISelenium.RetrieveLastRemoteControlLogs">
            <summary>Retrieve the last messages logged on a specific remote control. Useful for error reports, especially
            when running multiple remote controls in a distributed environment. The maximum number of log messages
            that can be retrieve is configured on remote control startup.
            </summary>
            <returns>The last N log messages as a multi-line string.</returns>
        </member>
        <member name="M:Selenium.ISelenium.KeyDownNative(System.String)">
            <summary>Simulates a user pressing a key (without releasing it yet) by sending a native operating system keystroke.
            This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing
            a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and
            metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular
            element, focus on the element first before running this command.
            </summary>
            <param name="keycode">an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!</param>
        </member>
        <member name="M:Selenium.ISelenium.KeyUpNative(System.String)">
            <summary>Simulates a user releasing a key by sending a native operating system keystroke.
            This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing
            a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and
            metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular
            element, focus on the element first before running this command.
            </summary>
            <param name="keycode">an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!</param>
        </member>
        <member name="M:Selenium.ISelenium.KeyPressNative(System.String)">
            <summary>Simulates a user pressing and releasing a key by sending a native operating system keystroke.
            This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing
            a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and
            metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular
            element, focus on the element first before running this command.
            </summary>
            <param name="keycode">an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!</param>
        </member>
        <member name="T:Selenium.SeleniumException">
            <summary>
            Thrown when a Selenium command fails.
            </summary>
        </member>
        <member name="M:Selenium.SeleniumException.#ctor">
            <summary>
            Creates a simple exception
            </summary>
        </member>
        <member name="M:Selenium.SeleniumException.#ctor(System.String)">
            <summary>
            Creates an exception with the specified message
            </summary>
            <param name="message">the message to add to the exception</param>
        </member>
        <member name="M:Selenium.SeleniumException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an exception with the specified message and inner exception
            </summary>
            <param name="message">the message to add to the exception</param>
            <param name="innerException">the inner exception wrapped by this exception</param>
        </member>
        <member name="T:Selenium.WebDriverBackedSelenium">
            <summary>
            Provides a Selenium instance that processes its commands via an IWebDriver instance.
            </summary>
        </member>
        <member name="F:Selenium.WebDriverBackedSelenium.commandProcessor">
            <summary>
            An ICommandProcessor object used to process the commands.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.#ctor(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.WebDriverBackedSelenium"/> class using the specified
            WebDriver driver and base URL.
            </summary>
            <param name="baseDriver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> instance used to drive the browser.</param>
            <param name="baseUrl">The base URL of the Selenium server.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.#ctor(OpenQA.Selenium.IWebDriver,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.WebDriverBackedSelenium"/> class using the specified
            WebDriver driver and base URL.
            </summary>
            <param name="baseDriver">The <see cref="T:OpenQA.Selenium.IWebDriver"/> instance used to drive the browser.</param>
            <param name="baseUrl">The base URL of the Selenium server.</param>
        </member>
        <member name="P:Selenium.WebDriverBackedSelenium.UnderlyingWebDriver">
            <summary>
            Gets the underlying <see cref="T:OpenQA.Selenium.IWebDriver"/> object used to drive the browser for this instance of Selenium.
            </summary>
        </member>
        <member name="P:Selenium.WebDriverBackedSelenium.Processor">
            <summary>
            The command processor that handles all of our Selenium commands
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SetExtensionJs(System.String)">
            <summary>
            Sets the extension Javascript for the session
            </summary>
            <param name="extensionJs">The extention JavaScript to use.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Start">
            <summary>
            Starts a new Selenium testing session
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Start(System.String)">
            <summary>
            Starts a new Selenium testing session
            </summary>
            <param name="optionsString">The options to use for the session.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Stop">
            <summary>
            Ends the current Selenium testing session (normally killing the browser)
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Click(System.String)">
            <summary>Clicks on a link, button, checkbox or radio button. If the click action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </summary>
            <param name="locator">an element locator</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.DoubleClick(System.String)">
            <summary>Double clicks on a link, button, checkbox or radio button. If the double click action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </summary>
            <param name="locator">an element locator</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ContextMenu(System.String)">
            <summary>Simulates opening the context menu for the specified element (as might happen if the user "right-clicked" on the element).
            </summary>
            <param name="locator">an element locator</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ClickAt(System.String,System.String)">
            <summary>Clicks on a link, button, checkbox or radio button. If the click action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </summary>
            <param name="locator">an element locator</param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.DoubleClickAt(System.String,System.String)">
            <summary>Doubleclicks on a link, button, checkbox or radio button. If the action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </summary>
            <param name="locator">an element locator</param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ContextMenuAt(System.String,System.String)">
            <summary>Simulates opening the context menu for the specified element (as might happen if the user "right-clicked" on the element).
            </summary>
            <param name="locator">an element locator</param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.FireEvent(System.String,System.String)">
            <summary>Explicitly simulate an event, to trigger the corresponding "on<em>event</em>"
            handler.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="eventName">the event name, e.g. "focus" or "blur"</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Focus(System.String)">
            <summary>Move the focus to the specified element; for example, if the element is an input field, move the cursor to that field.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.KeyPress(System.String,System.String)">
            <summary>Simulates a user pressing and releasing a key.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="keySequence">Either be a string("\" followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: "w", "\119".</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ShiftKeyDown">
            <summary>Press the shift key and hold it down until doShiftUp() is called or a new page is loaded.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ShiftKeyUp">
            <summary>Release the shift key.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MetaKeyDown">
            <summary>Press the meta key and hold it down until doMetaUp() is called or a new page is loaded.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MetaKeyUp">
            <summary>Release the meta key.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.AltKeyDown">
            <summary>Press the alt key and hold it down until doAltUp() is called or a new page is loaded.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.AltKeyUp">
            <summary>Release the alt key.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ControlKeyDown">
            <summary>Press the control key and hold it down until doControlUp() is called or a new page is loaded.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ControlKeyUp">
            <summary>Release the control key.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.KeyDown(System.String,System.String)">
            <summary>Simulates a user pressing a key (without releasing it yet).
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="keySequence">Either be a string("\" followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: "w", "\119".</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.KeyUp(System.String,System.String)">
            <summary>Simulates a user releasing a key.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="keySequence">Either be a string("\" followed by the numeric keycode  of the key to be pressed, normally the ASCII value of that key), or a single  character. For example: "w", "\119".</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseOver(System.String)">
            <summary>Simulates a user hovering a mouse over the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseOut(System.String)">
            <summary>Simulates a user moving the mouse pointer away from the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseDown(System.String)">
            <summary>Simulates a user pressing the left mouse button (without releasing it yet) on
            the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseDownRight(System.String)">
            <summary>Simulates a user pressing the right mouse button (without releasing it yet) on
            the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseDownAt(System.String,System.String)">
            <summary>Simulates a user pressing the left mouse button (without releasing it yet) at
            the specified location.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseDownRightAt(System.String,System.String)">
            <summary>Simulates a user pressing the right mouse button (without releasing it yet) at
            the specified location.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseUp(System.String)">
            <summary>Simulates the event that occurs when the user releases the mouse button (i.e., stops
            holding the button down) on the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseUpRight(System.String)">
            <summary>Simulates the event that occurs when the user releases the right mouse button (i.e., stops
            holding the button down) on the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseUpAt(System.String,System.String)">
            <summary>Simulates the event that occurs when the user releases the mouse button (i.e., stops
            holding the button down) at the specified location.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseUpRightAt(System.String,System.String)">
            <summary>Simulates the event that occurs when the user releases the right mouse button (i.e., stops
            holding the button down) at the specified location.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseMove(System.String)">
            <summary>Simulates a user pressing the mouse button (without releasing it yet) on
            the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.MouseMoveAt(System.String,System.String)">
            <summary>Simulates a user pressing the mouse button (without releasing it yet) on
            the specified element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="coordString">specifies the x,y position (i.e. - 10,20) of the mouse      event relative to the element returned by the locator.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Type(System.String,System.String)">
            <summary>Sets the value of an input field, as though you typed it in.
            
            <p>Can also be used to set the value of combo boxes, check boxes, etc. In these cases,
            value should be the value of the option selected, not the visible text.</p>
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="value">the value to type</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.TypeKeys(System.String,System.String)">
            <summary>Simulates keystroke events on the specified element, as though you typed the value key-by-key.
            
            <p>This is a convenience method for calling keyDown, keyUp, keyPress for every character in the specified string;
            this is useful for dynamic UI widgets (like auto-completing combo boxes) that require explicit key events.</p><p>Unlike the simple "type" command, which forces the specified value into the page directly, this command
            may or may not have any visible effect, even in cases where typing keys would normally have a visible effect.
            For example, if you use "typeKeys" on a form element, you may or may not see the results of what you typed in
            the field.</p><p>In some cases, you may need to use the simple "type" command to set the value of the field and then the "typeKeys" command to
            send the keystroke events corresponding to what you just typed.</p>
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <param name="value">the value to type</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SetSpeed(System.String)">
            <summary>Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation).  By default, there is no such delay, i.e.,
            the delay is 0 milliseconds.
            </summary>
            <param name="value">the number of milliseconds to pause after operation</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSpeed">
            <summary>Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,
            the delay is 0 milliseconds.
            
            See also setSpeed.
            </summary>
            <returns>the execution speed in milliseconds.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Check(System.String)">
            <summary>Check a toggle-button (checkbox/radio)
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Uncheck(System.String)">
            <summary>Uncheck a toggle-button (checkbox/radio)
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Select(System.String,System.String)">
            <summary>Select an option from a drop-down using an option locator.
            
            <p>
            Option locators provide different ways of specifying options of an HTML
            Select element (e.g. for selecting a specific option, or for asserting
            that the selected option satisfies a specification). There are several
            forms of Select Option Locator.
            </p><ul><li><strong>label</strong>=<em>labelPattern</em>:
            matches options based on their labels, i.e. the visible text. (This
            is the default.)
            <ul class="first last simple"><li>label=regexp:^[Oo]ther</li></ul></li><li><strong>value</strong>=<em>valuePattern</em>:
            matches options based on their values.
            <ul class="first last simple"><li>value=other</li></ul></li><li><strong>id</strong>=<em>id</em>:
            
            matches options based on their ids.
            <ul class="first last simple"><li>id=option1</li></ul></li><li><strong>index</strong>=<em>index</em>:
            matches an option based on its index (offset from zero).
            <ul class="first last simple"><li>index=2</li></ul></li></ul><p>
            If no option locator prefix is provided, the default behaviour is to match on <strong>label</strong>.
            </p>
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <param name="optionLocator">an option locator (a label by default)</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.AddSelection(System.String,System.String)">
            <summary>Add a selection to the set of selected options in a multi-select element using an option locator.
            
            @see #doSelect for details of option locators
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> identifying a multi-select box</param>
            <param name="optionLocator">an option locator (a label by default)</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.RemoveSelection(System.String,System.String)">
            <summary>Remove a selection from the set of selected options in a multi-select element using an option locator.
            
            @see #doSelect for details of option locators
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> identifying a multi-select box</param>
            <param name="optionLocator">an option locator (a label by default)</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.RemoveAllSelections(System.String)">
            <summary>Unselects all of the selected options in a multi-select element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> identifying a multi-select box</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Submit(System.String)">
            <summary>Submit the specified form. This is particularly useful for forms without
            submit buttons, e.g. single-input "Search" forms.
            </summary>
            <param name="formLocator">an <a href="#locators">element locator</a> for the form you want to submit</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Open(System.String)">
            <summary>Opens an URL in the test frame. This accepts both relative and absolute
            URLs.
            
            The "open" command waits for the page to load before proceeding,
            ie. the "AndWait" suffix is implicit.
            
            <em>Note</em>: The URL must be on the same domain as the runner HTML
            due to security restrictions in the browser (Same Origin Policy). If you
            need to open an URL on another domain, use the Selenium Server to start a
            new browser session on that domain.
            </summary>
            <param name="url">the URL to open; may be relative or absolute</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.OpenWindow(System.String,System.String)">
            <summary>Opens a popup window (if a window with that ID isn't already open).
            After opening the window, you'll need to select it using the selectWindow
            command.
            
            <p>This command can also be a useful workaround for bug SEL-339.  In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example).
            In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using
            an empty (blank) url, like this: openWindow("", "myFunnyWindow").</p>
            </summary>
            <param name="url">the URL to open, which can be blank</param>
            <param name="windowID">the JavaScript window ID of the window to select</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SelectWindow(System.String)">
            <summary>Selects a popup window using a window locator; once a popup window has been selected, all
            commands go to that window. To select the main window again, use null
            as the target.
            
            <p>
            
            Window locators provide different ways of specifying the window object:
            by title, by internal JavaScript "name," or by JavaScript variable.
            </p><ul><li><strong>title</strong>=<em>My Special Window</em>:
            Finds the window using the text that appears in the title bar.  Be careful;
            two windows can share the same title.  If that happens, this locator will
            just pick one.
            </li><li><strong>name</strong>=<em>myWindow</em>:
            Finds the window using its internal JavaScript "name" property.  This is the second 
            parameter "windowName" passed to the JavaScript method window.open(url, windowName, windowFeatures, replaceFlag)
            (which Selenium intercepts).
            </li><li><strong>var</strong>=<em>variableName</em>:
            Some pop-up windows are unnamed (anonymous), but are associated with a JavaScript variable name in the current
            application window, e.g. "window.foo = window.open(url);".  In those cases, you can open the window using
            "var=foo".
            </li></ul><p>
            If no window locator prefix is provided, we'll try to guess what you mean like this:</p><p>1.) if windowID is null, (or the string "null") then it is assumed the user is referring to the original window instantiated by the browser).</p><p>2.) if the value of the "windowID" parameter is a JavaScript variable name in the current application window, then it is assumed
            that this variable contains the return value from a call to the JavaScript window.open() method.</p><p>3.) Otherwise, selenium looks in a hash it maintains that maps string names to window "names".</p><p>4.) If <em>that</em> fails, we'll try looping over all of the known windows to try to find the appropriate "title".
            Since "title" is not necessarily unique, this may have unexpected behavior.</p><p>If you're having trouble figuring out the name of a window that you want to manipulate, look at the Selenium log messages
            which identify the names of windows created via window.open (and therefore intercepted by Selenium).  You will see messages
            like the following for each window as it is opened:</p><p><code>debug: window.open call intercepted; window ID (which you can use with selectWindow()) is "myNewWindow"</code></p><p>In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example).
            (This is bug SEL-339.)  In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using
            an empty (blank) url, like this: openWindow("", "myFunnyWindow").</p>
            </summary>
            <param name="windowID">the JavaScript window ID of the window to select</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SelectPopUp(System.String)">
            <summary>Simplifies the process of selecting a popup window (and does not offer
            functionality beyond what <code>selectWindow()</code> already provides).
            <ul><li>If <code>windowID</code> is either not specified, or specified as
            "null", the first non-top window is selected. The top window is the one
            that would be selected by <code>selectWindow()</code> without providing a
            <code>windowID</code> . This should not be used when more than one popup
            window is in play.</li><li>Otherwise, the window will be looked up considering
            <code>windowID</code> as the following in order: 1) the "name" of the
            window, as specified to <code>window.open()</code>; 2) a javascript
            variable which is a reference to a window; and 3) the title of the
            window. This is the same ordered lookup performed by
            <code>selectWindow</code> .</li></ul>
            </summary>
            <param name="windowID">an identifier for the popup window, which can take on a                  number of different meanings</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.DeselectPopUp">
            <summary>Selects the main window. Functionally equivalent to using
            <code>selectWindow()</code> and specifying no value for
            <code>windowID</code>.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SelectFrame(System.String)">
            <summary>Selects a frame within the current window.  (You may invoke this command
            multiple times to select nested frames.)  To select the parent frame, use
            "relative=parent" as a locator; to select the top frame, use "relative=top".
            You can also select a frame by its 0-based index number; select the first frame with
            "index=0", or the third frame with "index=2".
            
            <p>You may also use a DOM expression to identify the frame you want directly,
            like this: <code>dom=frames["main"].frames["subframe"]</code></p>
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> identifying a frame or iframe</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetWhetherThisFrameMatchFrameExpression(System.String,System.String)">
            <summary>Determine whether current/locator identify the frame containing this running code.
            
            <p>This is useful in proxy injection mode, where this code runs in every
            browser frame and window, and sometimes the selenium server needs to identify
            the "current" frame.  In this case, when the test calls selectFrame, this
            routine is called for each frame to figure out which one has been selected.
            The selected frame will return true, while all others will return false.</p>
            </summary>
            <param name="currentFrameString">starting frame</param>
            <param name="target">new frame (which might be relative to the current one)</param>
            <returns>true if the new frame is this code's window</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetWhetherThisWindowMatchWindowExpression(System.String,System.String)">
            <summary>Determine whether currentWindowString plus target identify the window containing this running code.
            
            <p>This is useful in proxy injection mode, where this code runs in every
            browser frame and window, and sometimes the selenium server needs to identify
            the "current" window.  In this case, when the test calls selectWindow, this
            routine is called for each window to figure out which one has been selected.
            The selected window will return true, while all others will return false.</p>
            </summary>
            <param name="currentWindowString">starting window</param>
            <param name="target">new window (which might be relative to the current one, e.g., "_parent")</param>
            <returns>true if the new window is this code's window</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.WaitForPopUp(System.String,System.String)">
            <summary>Waits for a popup window to appear and load up.
            </summary>
            <param name="windowID">the JavaScript window "name" of the window that will appear (not the text of the title bar)                 If unspecified, or specified as "null", this command will                 wait for the first non-top window to appear (don't rely                 on this if you are working with multiple popups                 simultaneously).</param>
            <param name="timeout">a timeout in milliseconds, after which the action will return with an error.                If this value is not specified, the default Selenium                timeout will be used. See the setTimeout() command.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ChooseCancelOnNextConfirmation">
            <summary><p>
            By default, Selenium's overridden window.confirm() function will
            return true, as if the user had manually clicked OK; after running
            this command, the next call to confirm() will return false, as if
            the user had clicked Cancel.  Selenium will then resume using the
            default behavior for future confirmations, automatically returning 
            true (OK) unless/until you explicitly call this command for each
            confirmation.
            </p><p>
            Take note - every time a confirmation comes up, you must
            consume it with a corresponding getConfirmation, or else
            the next selenium operation will fail.
            </p>
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ChooseOkOnNextConfirmation">
            <summary><p>
            Undo the effect of calling chooseCancelOnNextConfirmation.  Note
            that Selenium's overridden window.confirm() function will normally automatically
            return true, as if the user had manually clicked OK, so you shouldn't
            need to use this command unless for some reason you need to change
            your mind prior to the next confirmation.  After any confirmation, Selenium will resume using the
            default behavior for future confirmations, automatically returning 
            true (OK) unless/until you explicitly call chooseCancelOnNextConfirmation for each
            confirmation.
            </p><p>
            Take note - every time a confirmation comes up, you must
            consume it with a corresponding getConfirmation, or else
            the next selenium operation will fail.
            </p>
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.AnswerOnNextPrompt(System.String)">
            <summary>Instructs Selenium to return the specified answer string in response to
            the next JavaScript prompt [window.prompt()].
            </summary>
            <param name="answer">the answer to give in response to the prompt pop-up</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GoBack">
            <summary>Simulates the user clicking the "back" button on their browser.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Refresh">
            <summary>Simulates the user clicking the "Refresh" button on their browser.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Close">
            <summary>Simulates the user clicking the "close" button in the titlebar of a popup
            window or tab.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsAlertPresent">
            <summary>Has an alert occurred?
            
            <p>
            This function never throws an exception
            </p>
            </summary>
            <returns>true if there is an alert</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsPromptPresent">
            <summary>Has a prompt occurred?
            
            <p>
            This function never throws an exception
            </p>
            </summary>
            <returns>true if there is a pending prompt</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsConfirmationPresent">
            <summary>Has confirm() been called?
            
            <p>
            This function never throws an exception
            </p>
            </summary>
            <returns>true if there is a pending confirmation</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetAlert">
            <summary>Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.
            
            <p>Getting an alert has the same effect as manually clicking OK. If an
            alert is generated but you do not consume it with getAlert, the next Selenium action
            will fail.</p><p>Under Selenium, JavaScript alerts will NOT pop up a visible alert
            dialog.</p><p>Selenium does NOT support JavaScript alerts that are generated in a
            page's onload() event handler. In this case a visible dialog WILL be
            generated and Selenium will hang until someone manually clicks OK.</p>
            </summary>
            <returns>The message of the most recent JavaScript alert</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetConfirmation">
            <summary>Retrieves the message of a JavaScript confirmation dialog generated during
            the previous action.
            
            <p>
            By default, the confirm function will return true, having the same effect
            as manually clicking OK. This can be changed by prior execution of the
            chooseCancelOnNextConfirmation command. 
            </p><p>
            If an confirmation is generated but you do not consume it with getConfirmation,
            the next Selenium action will fail.
            </p><p>
            NOTE: under Selenium, JavaScript confirmations will NOT pop up a visible
            dialog.
            </p><p>
            NOTE: Selenium does NOT support JavaScript confirmations that are
            generated in a page's onload() event handler. In this case a visible
            dialog WILL be generated and Selenium will hang until you manually click
            OK.
            </p>
            </summary>
            <returns>the message of the most recent JavaScript confirmation dialog</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetPrompt">
            <summary>Retrieves the message of a JavaScript question prompt dialog generated during
            the previous action.
            
            <p>Successful handling of the prompt requires prior execution of the
            answerOnNextPrompt command. If a prompt is generated but you
            do not get/verify it, the next Selenium action will fail.</p><p>NOTE: under Selenium, JavaScript prompts will NOT pop up a visible
            dialog.</p><p>NOTE: Selenium does NOT support JavaScript prompts that are generated in a
            page's onload() event handler. In this case a visible dialog WILL be
            generated and Selenium will hang until someone manually clicks OK.</p>
            </summary>
            <returns>the message of the most recent JavaScript question prompt</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetLocation">
            <summary>Gets the absolute URL of the current page.
            </summary>
            <returns>the absolute URL of the current page</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetTitle">
            <summary>Gets the title of the current page.
            </summary>
            <returns>the title of the current page</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetBodyText">
            <summary>Gets the entire text of the page.
            </summary>
            <returns>the entire text of the page</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetValue(System.String)">
            <summary>Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).
            For checkbox/radio elements, the value will be "on" or "off" depending on
            whether the element is checked or not.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>the element value, or "on/off" for checkbox/radio elements</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetText(System.String)">
            <summary>Gets the text of an element. This works for any element that contains
            text. This command uses either the textContent (Mozilla-like browsers) or
            the innerText (IE-like browsers) of the element, which is the rendered
            text shown to the user.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>the text of the element</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Highlight(System.String)">
            <summary>Briefly changes the backgroundColor of the specified element yellow.  Useful for debugging.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetEval(System.String)">
            <summary>Gets the result of evaluating the specified JavaScript snippet.  The snippet may
            have multiple lines, but only the result of the last line will be returned.
            
            <p>Note that, by default, the snippet will run in the context of the "selenium"
            object itself, so <code>this</code> will refer to the Selenium object.  Use <code>window</code> to
            refer to the window of your application, e.g. <code>window.document.getElementById('foo')</code></p><p>If you need to use
            a locator to refer to a single element in your application page, you can
            use <code>this.browserbot.findElement("id=foo")</code> where "id=foo" is your locator.</p>
            </summary>
            <param name="script">the JavaScript snippet to run</param>
            <returns>the results of evaluating the snippet</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsChecked(System.String)">
            <summary>Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to a checkbox or radio button</param>
            <returns>true if the checkbox is checked, false otherwise</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetTable(System.String)">
            <summary>Gets the text from a cell of a table. The cellAddress syntax
            tableLocator.row.column, where row and column start at 0.
            </summary>
            <param name="tableCellAddress">a cell address, e.g. "foo.1.4"</param>
            <returns>the text from the specified cell</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSelectedLabels(System.String)">
            <summary>Gets all option labels (visible text) for selected options in the specified select or multi-select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all selected option labels in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSelectedLabel(System.String)">
            <summary>Gets option label (visible text) for selected option in the specified select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>the selected option label in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSelectedValues(System.String)">
            <summary>Gets all option values (value attributes) for selected options in the specified select or multi-select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all selected option values in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSelectedValue(System.String)">
            <summary>Gets option value (value attribute) for selected option in the specified select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>the selected option value in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSelectedIndexes(System.String)">
            <summary>Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all selected option indexes in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSelectedIndex(System.String)">
            <summary>Gets option index (option number, starting at 0) for selected option in the specified select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>the selected option index in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSelectedIds(System.String)">
            <summary>Gets all option element IDs for selected options in the specified select or multi-select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all selected option IDs in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSelectedId(System.String)">
            <summary>Gets option element ID for selected option in the specified select element.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>the selected option ID in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsSomethingSelected(System.String)">
            <summary>Determines whether some option in a drop-down menu is selected.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>true if some option has been selected, false otherwise</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetSelectOptions(System.String)">
            <summary>Gets all option labels in the specified select drop-down.
            </summary>
            <param name="selectLocator">an <a href="#locators">element locator</a> identifying a drop-down menu</param>
            <returns>an array of all option labels in the specified select drop-down</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetAttribute(System.String)">
            <summary>Gets the value of an element attribute. The value of the attribute may
            differ across browsers (this is the case for the "style" attribute, for
            example).
            </summary>
            <param name="attributeLocator">an element locator followed by an @ sign and then the name of the attribute, e.g. "foo@bar"</param>
            <returns>the value of the specified attribute</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsTextPresent(System.String)">
            <summary>Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.
            </summary>
            <param name="pattern">a <a href="#patterns">pattern</a> to match with the text of the page</param>
            <returns>true if the pattern matches the text, false otherwise</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsElementPresent(System.String)">
            <summary>Verifies that the specified element is somewhere on the page.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>true if the element is present, false otherwise</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsVisible(System.String)">
            <summary>Determines if the specified element is visible. An
            element can be rendered invisible by setting the CSS "visibility"
            property to "hidden", or the "display" property to "none", either for the
            element itself or one if its ancestors.  This method will fail if
            the element is not present.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>true if the specified element is visible, false otherwise</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsEditable(System.String)">
            <summary>Determines whether the specified input element is editable, ie hasn't been disabled.
            This method will fail if the specified element isn't an input element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a></param>
            <returns>true if the input element is editable, false otherwise</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetAllButtons">
            <summary>Returns the IDs of all buttons on the page.
            
            <p>If a given button has no ID, it will appear as "" in this array.</p>
            </summary>
            <returns>the IDs of all buttons on the page</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetAllLinks">
            <summary>Returns the IDs of all links on the page.
            
            <p>If a given link has no ID, it will appear as "" in this array.</p>
            </summary>
            <returns>the IDs of all links on the page</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetAllFields">
            <summary>Returns the IDs of all input fields on the page.
            
            <p>If a given field has no ID, it will appear as "" in this array.</p>
            </summary>
            <returns>the IDs of all field on the page</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetAttributeFromAllWindows(System.String)">
            <summary>Returns an array of JavaScript property values from all known windows having one.
            </summary>
            <param name="attributeName">name of an attribute on the windows</param>
            <returns>the set of values of this attribute from all known windows.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Dragdrop(System.String,System.String)">
            <summary>deprecated - use dragAndDrop instead
            </summary>
            <param name="locator">an element locator</param>
            <param name="movementsString">offset in pixels from the current location to which the element should be moved, e.g., "+70,-300"</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SetMouseSpeed(System.String)">
            <summary>Configure the number of pixels between "mousemove" events during dragAndDrop commands (default=10).
            <p>Setting this value to 0 means that we'll send a "mousemove" event to every single pixel
            in between the start location and the end location; that can be very slow, and may
            cause some browsers to force the JavaScript to timeout.</p><p>If the mouse speed is greater than the distance between the two dragged objects, we'll
            just send one "mousemove" at the start location and then one final one at the end location.</p>
            </summary>
            <param name="pixels">the number of pixels between "mousemove" events</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetMouseSpeed">
            <summary>Returns the number of pixels between "mousemove" events during dragAndDrop commands (default=10).
            </summary>
            <returns>the number of pixels between "mousemove" events during dragAndDrop commands (default=10)</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.DragAndDrop(System.String,System.String)">
            <summary>Drags an element a certain distance and then drops it
            </summary>
            <param name="locator">an element locator</param>
            <param name="movementsString">offset in pixels from the current location to which the element should be moved, e.g., "+70,-300"</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.DragAndDropToObject(System.String,System.String)">
            <summary>Drags an element and drops it on another element
            </summary>
            <param name="locatorOfObjectToBeDragged">an element to be dragged</param>
            <param name="locatorOfDragDestinationObject">an element whose location (i.e., whose center-most pixel) will be the point where locatorOfObjectToBeDragged  is dropped</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.WindowFocus">
            <summary>Gives focus to the currently selected window
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.WindowMaximize">
            <summary>Resize currently selected window to take up the entire screen
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetAllWindowIds">
            <summary>Returns the IDs of all windows that the browser knows about in an array.
            </summary>
            <returns>Array of identifiers of all windows that the browser knows about.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetAllWindowNames">
            <summary>Returns the names of all windows that the browser knows about in an array.
            </summary>
            <returns>Array of names of all windows that the browser knows about.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetAllWindowTitles">
            <summary>Returns the titles of all windows that the browser knows about in an array.
            </summary>
            <returns>Array of titles of all windows that the browser knows about.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetHtmlSource">
            <summary>Returns the entire HTML source between the opening and
            closing "html" tags.
            </summary>
            <returns>the entire HTML source</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SetCursorPosition(System.String,System.String)">
            <summary>Moves the text cursor to the specified position in the given input element or textarea.
            This method will fail if the specified element isn't an input element or textarea.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an input element or textarea</param>
            <param name="position">the numerical position of the cursor in the field; position should be 0 to move the position to the beginning of the field.  You can also set the cursor to -1 to move it to the end of the field.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetElementIndex(System.String)">
            <summary>Get the relative index of an element to its parent (starting from 0). The comment node and empty text node
            will be ignored.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element</param>
            <returns>of relative index of the element to its parent (starting from 0)</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsOrdered(System.String,System.String)">
            <summary>Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will
            not be considered ordered.
            </summary>
            <param name="locator1">an <a href="#locators">element locator</a> pointing to the first element</param>
            <param name="locator2">an <a href="#locators">element locator</a> pointing to the second element</param>
            <returns>true if element1 is the previous sibling of element2, false otherwise</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetElementPositionLeft(System.String)">
            <summary>Retrieves the horizontal position of an element
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element OR an element itself</param>
            <returns>of pixels from the edge of the frame.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetElementPositionTop(System.String)">
            <summary>Retrieves the vertical position of an element
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element OR an element itself</param>
            <returns>of pixels from the edge of the frame.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetElementWidth(System.String)">
            <summary>Retrieves the width of an element
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element</param>
            <returns>width of an element in pixels</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetElementHeight(System.String)">
            <summary>Retrieves the height of an element
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element</param>
            <returns>height of an element in pixels</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetCursorPosition(System.String)">
            <summary>Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.
            
            <p>Specifically, if the cursor/selection has been cleared by JavaScript, this command will tend to
            return the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as <a href="http://jira.openqa.org/browse/SEL-243">SEL-243</a>.</p>
            This method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an input element or textarea</param>
            <returns>the numerical position of the cursor in the field</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetExpression(System.String)">
            <summary>Returns the specified expression.
            
            <p>This is useful because of JavaScript preprocessing.
            It is used to generate commands like assertExpression and waitForExpression.</p>
            </summary>
            <param name="expression">the value to return</param>
            <returns>the value passed in</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetXpathCount(System.String)">
            <summary>Returns the number of nodes that match the specified xpath, eg. "//table" would give
            the number of tables.
            </summary>
            <param name="xpath">the xpath expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.</param>
            <returns>the number of nodes that match the specified xpath</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetCSSCount(System.String)">
            <summary>Returns the number of nodes that match the specified css, eg. "css=table" would give
            the number of tables.
            </summary>
            <param name="cssLocator">the css path expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.</param>
            <returns>the number of nodes that match the specified css locator</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.AssignId(System.String,System.String)">
            <summary>Temporarily sets the "id" attribute of the specified element, so you can locate it in the future
            using its ID rather than a slow/complicated XPath.  This ID will disappear once the page is
            reloaded.
            </summary>
            <param name="locator">an <a href="#locators">element locator</a> pointing to an element</param>
            <param name="identifier">a string to be used as the ID of the specified element</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.AllowNativeXpath(System.String)">
            <summary>Specifies whether Selenium should use the native in-browser implementation
            of XPath (if any native version is available); if you pass "false" to
            this function, we will always use our pure-JavaScript xpath library.
            Using the pure-JS xpath library can improve the consistency of xpath
            element locators between different browser vendors, but the pure-JS
            version is much slower than the native implementations.
            </summary>
            <param name="allow">boolean, true means we'll prefer to use native XPath; false means we'll only use JS XPath</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IgnoreAttributesWithoutValue(System.String)">
            <summary>Specifies whether Selenium will ignore xpath attributes that have no
            value, i.e. are the empty string, when using the non-native xpath
            evaluation engine. You'd want to do this for performance reasons in IE.
            However, this could break certain xpaths, for example an xpath that looks
            for an attribute whose value is NOT the empty string.
            
            The hope is that such xpaths are relatively rare, but the user should
            have the option of using them. Note that this only influences xpath
            evaluation when using the ajaxslt engine (i.e. not "javascript-xpath").
            </summary>
            <param name="ignore">boolean, true means we'll ignore attributes without value                        at the expense of xpath "correctness"; false means                        we'll sacrifice speed for correctness.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.WaitForCondition(System.String,System.String)">
            <summary>Runs the specified JavaScript snippet repeatedly until it evaluates to "true".
            The snippet may have multiple lines, but only the result of the last line
            will be considered.
            
            <p>Note that, by default, the snippet will be run in the runner's test window, not in the window
            of your application.  To get the window of your application, you can use
            the JavaScript snippet <code>selenium.browserbot.getCurrentWindow()</code>, and then
            run your JavaScript in there</p>
            </summary>
            <param name="script">the JavaScript snippet to run</param>
            <param name="timeout">a timeout in milliseconds, after which this command will return with an error</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SetTimeout(System.String)">
            <summary>Specifies the amount of time that Selenium will wait for actions to complete.
            
            <p>Actions that require waiting include "open" and the "waitFor*" actions.</p>
            The default timeout is 30 seconds.
            </summary>
            <param name="timeout">a timeout in milliseconds, after which the action will return with an error</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.WaitForPageToLoad(System.String)">
            <summary>Waits for a new page to load.
            
            <p>You can use this command instead of the "AndWait" suffixes, "clickAndWait", "selectAndWait", "typeAndWait" etc.
            (which are only available in the JS API).</p><p>Selenium constantly keeps track of new pages loading, and sets a "newPageLoaded"
            flag when it first notices a page load.  Running any other Selenium command after
            turns the flag to false.  Hence, if you want to wait for a page to load, you must
            wait immediately after a Selenium command that caused a page-load.</p>
            </summary>
            <param name="timeout">a timeout in milliseconds, after which this command will return with an error</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.WaitForFrameToLoad(System.String,System.String)">
            <summary>Waits for a new frame to load.
            
            <p>Selenium constantly keeps track of new pages and frames loading, 
            and sets a "newPageLoaded" flag when it first notices a page load.</p>
            
            See waitForPageToLoad for more information.
            </summary>
            <param name="frameAddress">FrameAddress from the server side</param>
            <param name="timeout">a timeout in milliseconds, after which this command will return with an error</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetCookie">
            <summary>Return all cookies of the current page under test.
            </summary>
            <returns>all cookies of the current page under test</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.GetCookieByName(System.String)">
            <summary>Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.
            </summary>
            <param name="name">the name of the cookie</param>
            <returns>the value of the cookie</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.IsCookiePresent(System.String)">
            <summary>Returns true if a cookie with the specified name is present, or false otherwise.
            </summary>
            <param name="name">the name of the cookie</param>
            <returns>true if a cookie with the specified name is present, or false otherwise.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.CreateCookie(System.String,System.String)">
            <summary>Create a new cookie whose path and domain are same with those of current page
            under test, unless you specified a path for this cookie explicitly.
            </summary>
            <param name="nameValuePair">name and value of the cookie in a format "name=value"</param>
            <param name="optionsString">options for the cookie. Currently supported options include 'path', 'max_age' and 'domain'.      the optionsString's format is "path=/path/, max_age=60, domain=.foo.com". The order of options are irrelevant, the unit      of the value of 'max_age' is second.  Note that specifying a domain that isn't a subset of the current domain will      usually fail.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.DeleteCookie(System.String,System.String)">
            <summary>Delete a named cookie with specified path and domain.  Be careful; to delete a cookie, you
            need to delete it using the exact same path and domain that were used to create the cookie.
            If the path is wrong, or the domain is wrong, the cookie simply won't be deleted.  Also
            note that specifying a domain that isn't a subset of the current domain will usually fail.
            
            Since there's no way to discover at runtime the original path and domain of a given cookie,
            we've added an option called 'recurse' to try all sub-domains of the current domain with
            all paths that are a subset of the current path.  Beware; this option can be slow.  In
            big-O notation, it operates in O(n*m) time, where n is the number of dots in the domain
            name and m is the number of slashes in the path.
            </summary>
            <param name="name">the name of the cookie to be deleted</param>
            <param name="optionsString">options for the cookie. Currently supported options include 'path', 'domain'      and 'recurse.' The optionsString's format is "path=/path/, domain=.foo.com, recurse=true".      The order of options are irrelevant. Note that specifying a domain that isn't a subset of      the current domain will usually fail.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.DeleteAllVisibleCookies">
            <summary>Calls deleteCookie with recurse=true on all cookies visible to the current page.
            As noted on the documentation for deleteCookie, recurse=true can be much slower
            than simply deleting the cookies using a known domain/path.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SetBrowserLogLevel(System.String)">
            <summary>Sets the threshold for browser-side logging messages; log messages beneath this threshold will be discarded.
            Valid logLevel strings are: "debug", "info", "warn", "error" or "off".
            To see the browser logs, you need to
            either show the log window in GUI mode, or enable browser-side logging in Selenium RC.
            </summary>
            <param name="logLevel">one of the following: "debug", "info", "warn", "error" or "off"</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.RunScript(System.String)">
            <summary>Creates a new "script" tag in the body of the current test window, and 
            adds the specified text into the body of the command.  Scripts run in
            this way can often be debugged more easily than scripts executed using
            Selenium's "getEval" command.  Beware that JS exceptions thrown in these script
            tags aren't managed by Selenium, so you should probably wrap your script
            in try/catch blocks if there is any chance that the script will throw
            an exception.
            </summary>
            <param name="script">the JavaScript snippet to run</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.AddLocationStrategy(System.String,System.String)">
            <summary>Defines a new function for Selenium to locate elements on the page.
            For example,
            if you define the strategy "foo", and someone runs click("foo=blah"), we'll
            run your function, passing you the string "blah", and click on the element 
            that your function
            returns, or throw an "Element not found" error if your function returns null.
            
            We'll pass three arguments to your function:
            <ul><li>locator: the string the user passed in</li><li>inWindow: the currently selected window</li><li>inDocument: the currently selected document</li></ul>
            The function must return null if the element can't be found.
            </summary>
            <param name="strategyName">the name of the strategy to define; this should use only   letters [a-zA-Z] with no spaces or other punctuation.</param>
            <param name="functionDefinition">a string defining the body of a function in JavaScript.   For example: <code>return inDocument.getElementById(locator);</code></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.CaptureEntirePageScreenshot(System.String,System.String)">
            <summary>Saves the entire contents of the current window canvas to a PNG file.
            Contrast this with the captureScreenshot command, which captures the
            contents of the OS viewport (i.e. whatever is currently being displayed
            on the monitor), and is implemented in the RC only. Currently this only
            works in Firefox when running in chrome mode, and in IE non-HTA using
            the EXPERIMENTAL "Snapsie" utility. The Firefox implementation is mostly
            borrowed from the Screengrab! Firefox extension. Please see
            http://www.screengrab.org and http://snapsie.sourceforge.net/ for
            details.
            </summary>
            <param name="filename">the path to the file to persist the screenshot as. No                  filename extension will be appended by default.                  Directories will not be created if they do not exist,                    and an exception will be thrown, possibly by native                  code.</param>
            <param name="kwargs">a kwargs string that modifies the way the screenshot                  is captured. Example: "background=#CCFFDD" .                  Currently valid options:                  <dl><dt>background</dt><dd>the background CSS for the HTML document. This                     may be useful to set for capturing screenshots of                     less-than-ideal layouts, for example where absolute                     positioning causes the calculation of the canvas                     dimension to fail and a black background is exposed                     (possibly obscuring black text).</dd></dl></param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.Rollup(System.String,System.String)">
            <summary>Executes a command rollup, which is a series of commands with a unique
            name, and optionally arguments that control the generation of the set of
            commands. If any one of the rolled-up commands fails, the rollup is
            considered to have failed. Rollups may also contain nested rollups.
            </summary>
            <param name="rollupName">the name of the rollup command</param>
            <param name="kwargs">keyword arguments string that influences how the                    rollup expands into commands</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.AddScript(System.String,System.String)">
            <summary>Loads script content into a new script tag in the Selenium document. This
            differs from the runScript command in that runScript adds the script tag
            to the document of the AUT, not the Selenium document. The following
            entities in the script content are replaced by the characters they
            represent:
            
                &lt;
                &gt;
                &amp;
            
            The corresponding remove command is removeScript.
            </summary>
            <param name="scriptContent">the Javascript content of the script to add</param>
            <param name="scriptTagId">(optional) the id of the new script tag. If                       specified, and an element with this id already                       exists, this operation will fail.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.RemoveScript(System.String)">
            <summary>Removes a script tag from the Selenium document identified by the given
            id. Does nothing if the referenced tag doesn't exist.
            </summary>
            <param name="scriptTagId">the id of the script element to remove.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.UseXpathLibrary(System.String)">
            <summary>Allows choice of one of the available libraries.
            </summary>
            <param name="libraryName">name of the desired library Only the following three can be chosen: <ul><li>"ajaxslt" - Google's library</li><li>"javascript-xpath" - Cybozu Labs' faster library</li><li>"default" - The default library.  Currently the default library is "ajaxslt" .</li></ul> If libraryName isn't one of these three, then  no change will be made.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.SetContext(System.String)">
            <summary>Writes a message to the status bar and adds a note to the browser-side
            log.
            </summary>
            <param name="context">the message to be sent to the browser</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.AttachFile(System.String,System.String)">
            <summary>Sets a file input (upload) field to the file listed in fileLocator
            </summary>
            <param name="fieldLocator">an <a href="#locators">element locator</a></param>
            <param name="fileLocator">a URL pointing to the specified file. Before the file  can be set in the input field (fieldLocator), Selenium RC may need to transfer the file    to the local machine before attaching the file in a web page form. This is common in selenium  grid configurations where the RC server driving the browser is not the same  machine that started the test.   Supported Browsers: Firefox ("*chrome") only.</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.CaptureScreenshot(System.String)">
            <summary>Captures a PNG screenshot to the specified file.
            </summary>
            <param name="filename">the absolute path to the file to be written, e.g. "c:\blah\screenshot.png"</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.CaptureScreenshotToString">
            <summary>Capture a PNG screenshot.  It then returns the file as a base 64 encoded string.
            </summary>
            <returns>The base 64 encoded string of the screen shot (PNG file)</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.CaptureNetworkTraffic(System.String)">
            <summary>
            Captures the Network Traffic that is passing through Selenium Server
            </summary>
            <param name="type">Type of traffic to capture</param>
            <returns>The traffic passing through the Selenium Server.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.CaptureEntirePageScreenshotToString(System.String)">
            <summary>Downloads a screenshot of the browser current window canvas to a 
            based 64 encoded PNG file. The <em>entire</em> windows canvas is captured,
            including parts rendered outside of the current view port.
            
            Currently this only works in Mozilla and when running in chrome mode.
            </summary>
            <param name="kwargs">A kwargs string that modifies the way the screenshot is captured. Example: "background=#CCFFDD". This may be useful to set for capturing screenshots of less-than-ideal layouts, for example where absolute positioning causes the calculation of the canvas dimension to fail and a black background is exposed  (possibly obscuring black text).</param>
            <returns>The base 64 encoded string of the page screenshot (PNG file)</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.ShutDownSeleniumServer">
            <summary>Kills the running Selenium Server and all browser sessions.  After you run this command, you will no longer be able to send
            commands to the server; you can't remotely start the server once it has been stopped.  Normally
            you should prefer to run the "stop" command, which terminates the current browser session, rather than 
            shutting down the entire server.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.RetrieveLastRemoteControlLogs">
            <summary>Retrieve the last messages logged on a specific remote control. Useful for error reports, especially
            when running multiple remote controls in a distributed environment. The maximum number of log messages
            that can be retrieve is configured on remote control startup.
            </summary>
            <returns>The last N log messages as a multi-line string.</returns>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.KeyDownNative(System.String)">
            <summary>Simulates a user pressing a key (without releasing it yet) by sending a native operating system keystroke.
            This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing
            a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and
            metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular
            element, focus on the element first before running this command.
            </summary>
            <param name="keycode">an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.KeyUpNative(System.String)">
            <summary>Simulates a user releasing a key by sending a native operating system keystroke.
            This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing
            a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and
            metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular
            element, focus on the element first before running this command.
            </summary>
            <param name="keycode">an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!</param>
        </member>
        <member name="M:Selenium.WebDriverBackedSelenium.KeyPressNative(System.String)">
            <summary>Simulates a user pressing and releasing a key by sending a native operating system keystroke.
            This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing
            a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and
            metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular
            element, focus on the element first before running this command.
            </summary>
            <param name="keycode">an integer keycode number corresponding to a java.awt.event.KeyEvent; note that Java keycodes are NOT the same thing as JavaScript keycodes!</param>
        </member>
        <member name="T:Selenium.WebDriverCommandProcessor">
            <summary>
            Provides an implementation the ICommandProcessor interface which uses WebDriver to complete
            the Selenium commands.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.#ctor(System.String,OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.WebDriverCommandProcessor"/> class.
            </summary>
            <param name="baseUrl">The base URL of the Selenium server.</param>
            <param name="baseDriver">The IWebDriver object used for executing commands.</param>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.#ctor(System.Uri,OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Selenium.WebDriverCommandProcessor"/> class.
            </summary>
            <param name="baseUrl">The base URL of the Selenium server.</param>
            <param name="baseDriver">The IWebDriver object used for executing commands.</param>
        </member>
        <member name="P:Selenium.WebDriverCommandProcessor.UnderlyingWebDriver">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebDriver"/> object that executes the commands for this command processor.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.DoCommand(System.String,System.String[])">
            <summary>
            Sends the specified remote command to the browser to be performed
            </summary>
            <param name="command">The remote command verb.</param>
            <param name="args">The arguments to the remote command (depends on the verb).</param>
            <returns>the command result, defined by the remote JavaScript. "getX" style
            commands may return data from the browser</returns>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.SetExtensionJs(System.String)">
            <summary>
            Sets the script to use as user extensions.
            </summary>
            <param name="extensionJs">The script to use as user extensions.</param>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.Start">
            <summary>
            Starts the command processor.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.Start(System.String)">
            <summary>
            Starts the command processor using the specified options.
            </summary>
            <param name="optionsString">A string representing the options to use.</param>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.Start(System.Object)">
            <summary>
            Starts the command processor using the specified options.
            </summary>
            <param name="optionsObject">An object representing the options to use.</param>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.Stop">
            <summary>
            Stops the command processor.
            </summary>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.GetString(System.String,System.String[])">
            <summary>
            Gets a string from the command processor.
            </summary>
            <param name="command">The command to send.</param>
            <param name="args">The arguments of the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.GetStringArray(System.String,System.String[])">
            <summary>
            Gets a string array from the command processor.
            </summary>
            <param name="command">The command to send.</param>
            <param name="args">The arguments of the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.GetNumber(System.String,System.String[])">
            <summary>
            Gets a number from the command processor.
            </summary>
            <param name="command">The command to send.</param>
            <param name="args">The arguments of the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.GetNumberArray(System.String,System.String[])">
            <summary>
            Gets a number array from the command processor.
            </summary>
            <param name="command">The command to send.</param>
            <param name="args">The arguments of the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.GetBoolean(System.String,System.String[])">
            <summary>
            Gets a boolean value from the command processor.
            </summary>
            <param name="command">The command to send.</param>
            <param name="args">The arguments of the command.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:Selenium.WebDriverCommandProcessor.GetBooleanArray(System.String,System.String[])">
            <summary>
            Gets an array of boolean values from the command processor.
            </summary>
            <param name="command">The command to send.</param>
            <param name="args">The arguments of the command.</param>
            <returns>The result of the command.</returns>
        </member>
    </members>
</doc>
